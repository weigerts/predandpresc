{
	"name": "df_presc_presc_splitted",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_azure_table",
						"type": "DatasetReference"
					},
					"name": "sourcesqlhistoricalsnapshot",
					"description": "[datatransformation].[HistoricalSnapshot]"
				},
				{
					"dataset": {
						"referenceName": "ds_azure_table",
						"type": "DatasetReference"
					},
					"name": "sourcesqlviewccuser"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_delta_predandpresc",
						"type": "DatasetReference"
					},
					"name": "sinktodatalake"
				}
			],
			"transformations": [
				{
					"name": "joinmain"
				},
				{
					"name": "selectviewccuser"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as long,",
				"          user_id as string,",
				"          user_email as string,",
				"          division as string,",
				"          job_family as string,",
				"          functional_area as string,",
				"          reason_for_leaving as string,",
				"          termination_type as string,",
				"          termination_date as timestamp,",
				"          original_hire_date as timestamp,",
				"          electrolux_legal_entity as string,",
				"          organizational_area as string,",
				"          region as string,",
				"          tier_level as integer,",
				"          job_level_sub_band as string,",
				"          job_level_band as string,",
				"          employee_nationality as string,",
				"          is_line_manager as string,",
				"          country_of_location as string,",
				"          employee_type as string,",
				"          date_of_birth as timestamp,",
				"          employee_gender as string,",
				"          job_family_id as integer,",
				"          job_family_ref as string,",
				"          manager_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: '\\nSELECT [Id]\\n      ,[user_id]\\n      ,[user_email]\\n      ,[division]\\n      ,[job_family]\\n      ,[functional_area]\\n      ,[reason_for_leaving]\\n      ,[termination_type]\\n      ,[termination_date]\\n      ,[original_hire_date]\\n      ,[electrolux_legal_entity]\\n      ,[organizational_area]\\n      ,[region]\\n      ,[tier_level]\\n      ,[job_level_sub_band]\\n      ,[job_level_band]\\n      ,[employee_nationality]\\n      ,[is_line_manager]\\n      ,[country_of_location]\\n      ,[employee_type]\\n      ,[date_of_birth]\\n      ,[employee_gender]\\n      ,[job_family_id]\\n      ,[job_family_ref]\\n      ,[manager_id]\\n  FROM [datatransformation].[HistoricalSnapshot]\\n',",
				"     format: 'query') ~> sourcesqlhistoricalsnapshot",
				"source(output(",
				"          {User ID Technical} as integer,",
				"          {User Id} as string,",
				"          {SAP ID} as string,",
				"          {User Full Name} as string,",
				"          {Original Hire Date} as string,",
				"          {Job Title} as string,",
				"          {Manager Ref} as string,",
				"          {Manager Full Name} as string,",
				"          Region as string,",
				"          {Country Of Payroll} as string,",
				"          {Country of Location} as string,",
				"          {User Status} as string,",
				"          {Employment Status} as string,",
				"          {Termination Date} as string,",
				"          {Functional Area} as string,",
				"          {Full time/Part time} as string,",
				"          {Work Time / Capacity %} as double,",
				"          {Cost Centre} as string,",
				"          {Electrolux Legal Entity} as string,",
				"          {Individual IPE Ref} as string,",
				"          {Electrolux Legal Entity Ref} as string,",
				"          {Division ID} as integer,",
				"          Division as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from reporting.vw_users_cc',",
				"     format: 'query') ~> sourcesqlviewccuser",
				"sourcesqlhistoricalsnapshot, selectviewccuser join(sourcesqlhistoricalsnapshot@user_id == selectviewccuser@user_Id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinmain",
				"sourcesqlviewccuser select(mapColumn(",
				"          user_id_technical = {User ID Technical},",
				"          user_Id = {User Id},",
				"          sap_id = {SAP ID},",
				"          user_full_name = {User Full Name},",
				"          original_hire_date = {Original Hire Date},",
				"          job_title = {Job Title},",
				"          manager_ref = {Manager Ref},",
				"          manager_full_name = {Manager Full Name},",
				"          region = Region,",
				"          country_of_payroll = {Country Of Payroll},",
				"          country_of_location = {Country of Location},",
				"          user_status = {User Status},",
				"          employment_status = {Employment Status},",
				"          termination_date = {Termination Date},",
				"          functional_area = {Functional Area},",
				"          full_time_part_time = {Full time/Part time},",
				"          work_time_capacity_per = {Work Time / Capacity %},",
				"          cost_centre = {Cost Centre},",
				"          electrolux_legal_entity = {Electrolux Legal Entity},",
				"          individual_ipe_ref = {Individual IPE Ref},",
				"          electrolux_legal_entity_ref = {Electrolux Legal Entity Ref},",
				"          division_id = {Division ID},",
				"          division = Division",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectviewccuser",
				"joinmain select(mapColumn(",
				"          Id,",
				"          user_id = sourcesqlhistoricalsnapshot@user_id,",
				"          user_email,",
				"          division = sourcesqlhistoricalsnapshot@division,",
				"          job_family,",
				"          functional_area = sourcesqlhistoricalsnapshot@functional_area,",
				"          reason_for_leaving,",
				"          termination_type,",
				"          termination_date = sourcesqlhistoricalsnapshot@termination_date,",
				"          original_hire_date = sourcesqlhistoricalsnapshot@original_hire_date,",
				"          electrolux_legal_entity = sourcesqlhistoricalsnapshot@electrolux_legal_entity,",
				"          organizational_area,",
				"          region = sourcesqlhistoricalsnapshot@region,",
				"          tier_level,",
				"          job_level_sub_band,",
				"          job_level_band,",
				"          employee_nationality,",
				"          is_line_manager,",
				"          country_of_location = sourcesqlhistoricalsnapshot@country_of_location,",
				"          employee_type,",
				"          date_of_birth,",
				"          employee_gender,",
				"          job_family_id,",
				"          job_family_ref,",
				"          manager_id,",
				"          user_id_technical,",
				"          sap_id,",
				"          user_full_name,",
				"          original_hire_date = selectviewccuser@original_hire_date,",
				"          job_title,",
				"          manager_ref,",
				"          manager_full_name,",
				"          region = selectviewccuser@region,",
				"          country_of_payroll,",
				"          country_of_location = selectviewccuser@country_of_location,",
				"          user_status,",
				"          employment_status,",
				"          termination_date = selectviewccuser@termination_date,",
				"          functional_area = selectviewccuser@functional_area,",
				"          full_time_part_time,",
				"          work_time_capacity_per,",
				"          cost_centre,",
				"          electrolux_legal_entity = selectviewccuser@electrolux_legal_entity,",
				"          individual_ipe_ref,",
				"          electrolux_legal_entity_ref,",
				"          division_id,",
				"          division = selectviewccuser@division",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          respondents as integer,",
				"          responserate as integer,",
				"          culture as integer,",
				"          culture_per_favorable as integer,",
				"          trust_team as integer,",
				"          trust_team_per_favorable as integer,",
				"          role_clarity_functional as string,",
				"          role_clarity_functional_per_favorable as string,",
				"          growth_functional as string,",
				"          growth_functional_per_favorable as string,",
				"          career as integer,",
				"          career_per_favorable as integer,",
				"          continuous_improvement_functional as string,",
				"          continuous_improvement_functional_per_favorable as string,",
				"          communication_manager as integer,",
				"          communication_manager_per_favorable as integer,",
				"          support as integer,",
				"          support_per_favorable as integer,",
				"          equal_opportunity as integer,",
				"          equal_opportunity_per_favorable as integer,",
				"          {distress_well-being} as integer,",
				"          {distress_well-being_per_favorable} as integer,",
				"          ethics_helpline as integer,",
				"          ethics_helpline_per_favorable as integer,",
				"          work_life_balance as integer,",
				"          work_life_balance_per_favorable as integer,",
				"          growth as integer,",
				"          growth_per_favorable as integer,",
				"          cooperation as integer,",
				"          cooperation_per_favorable as integer,",
				"          initiative as integer,",
				"          initiative_per_favorable as integer,",
				"          decision_making as integer,",
				"          decision_making_per_favorable as integer,",
				"          engagement_index as integer,",
				"          engagement_index_per_favorable as integer,",
				"          {engagement_index_>_recommend} as integer,",
				"          {engagement_index_>_recommend_per_favorable} as integer,",
				"          role_clarity as integer,",
				"          role_clarity_per_favorable as integer,",
				"          resources as integer,",
				"          resources_per_favorable as integer,",
				"          {engagement_index_>_esat} as integer,",
				"          {engagement_index_>_esat_per_favorable} as integer,",
				"          belonging as integer,",
				"          belonging_per_favorable as integer,",
				"          prospects as integer,",
				"          prospects_per_favorable as integer,",
				"          purpose_contribution as integer,",
				"          purpose_contribution_per_favorable as integer,",
				"          inclusion_team as integer,",
				"          inclusion_team_per_favorable as integer,",
				"          job_feedback as integer,",
				"          job_feedback_per_favorable as integer,",
				"          consumer_focus_culture as integer,",
				"          consumer_focus_culture_per_favorable as integer,",
				"          {non-discrimination} as integer,",
				"          {non-discrimination_per_favorable} as integer,",
				"          code_of_conduct as integer,",
				"          code_of_conduct_per_favorable as integer,",
				"          {health_&_safety} as integer,",
				"          {health_&_safety_per_favorable} as integer,",
				"          continuous_improvement as integer,",
				"          continuous_improvement_per_favorable as integer,",
				"          empowerment as integer,",
				"          empowerment_per_favorable as integer,",
				"          environment as integer,",
				"          environment_per_favorable as integer,",
				"          purpose as integer,",
				"          purpose_per_favorable as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['predpresc.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinktodatalake"
			]
		}
	}
}
{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "elx-a2-Peopletech-datafactory-dev"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().db_server_name};Initial Catalog=@{linkedService().db_name};User ID=@{linkedService().db_user}"
		},
		"ls_key_vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().kv_url}"
		},
		"ls_data_lake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_key_vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kv_url": {
						"type": "string",
						"defaultValue": "https://elx-a2-ppltech-kv-dev.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_key_vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"db_server_name": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_user": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_key_vault",
							"type": "LinkedServiceReference",
							"parameters": {
								"kv_url": "https://elx-a2-ppltech-kv-dev.vault.azure.net/"
							}
						},
						"secretName": "sql-db-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_data_lake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_data_lake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_key_vault",
							"type": "LinkedServiceReference",
							"parameters": {
								"kv_url": "https://elx-a2-ppltech-kv-dev.vault.azure.net/"
							}
						},
						"secretName": "storage-account-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_abs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ABS 2023 User_audit_report.xls",
						"folderPath": "abs",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "User First Name",
						"type": "String"
					},
					{
						"name": "User Last Name",
						"type": "String"
					},
					{
						"name": "User ID",
						"type": "String"
					},
					{
						"name": "Local system ID",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Date changed",
						"type": "String"
					},
					{
						"name": "Date effective",
						"type": "String"
					},
					{
						"name": "Field modified",
						"type": "String"
					},
					{
						"name": "Field type",
						"type": "String"
					},
					{
						"name": "Field changed from",
						"type": "String"
					},
					{
						"name": "Field changed to",
						"type": "String"
					},
					{
						"name": "Field changed by",
						"type": "String"
					},
					{
						"name": "Reason for change",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference",
					"parameters": {
						"db_server_name": "elx-a2-hrhub-sql-dev.database.windows.net",
						"db_name": "elx-a2-hrhub-sqldb-dev",
						"db_user": "dhradmin"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cost_center.csv",
						"fileSystem": "costcenter"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_evs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EVS.xlsx",
						"folderPath": "evs",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Respondents",
						"type": "String"
					},
					{
						"name": "ResponseRate",
						"type": "String"
					},
					{
						"name": "Culture",
						"type": "String"
					},
					{
						"name": "Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Trust - Team",
						"type": "String"
					},
					{
						"name": "Trust - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth Functional",
						"type": "String"
					},
					{
						"name": "Growth Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Career",
						"type": "String"
					},
					{
						"name": "Career  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Communication - Manager",
						"type": "String"
					},
					{
						"name": "Communication - Manager  %Favorable",
						"type": "String"
					},
					{
						"name": "Support",
						"type": "String"
					},
					{
						"name": "Support  %Favorable",
						"type": "String"
					},
					{
						"name": "Equal Opportunity",
						"type": "String"
					},
					{
						"name": "Equal Opportunity  %Favorable",
						"type": "String"
					},
					{
						"name": "Distress - Well-being",
						"type": "String"
					},
					{
						"name": "Distress - Well-being  %Favorable",
						"type": "String"
					},
					{
						"name": "Ethics Helpline",
						"type": "String"
					},
					{
						"name": "Ethics Helpline  %Favorable",
						"type": "String"
					},
					{
						"name": "Work Life Balance",
						"type": "String"
					},
					{
						"name": "Work Life Balance  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth",
						"type": "String"
					},
					{
						"name": "Growth  %Favorable",
						"type": "String"
					},
					{
						"name": "Cooperation",
						"type": "String"
					},
					{
						"name": "Cooperation  %Favorable",
						"type": "String"
					},
					{
						"name": "Initiative",
						"type": "String"
					},
					{
						"name": "Initiative  %Favorable",
						"type": "String"
					},
					{
						"name": "Decision Making",
						"type": "String"
					},
					{
						"name": "Decision Making  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index",
						"type": "String"
					},
					{
						"name": "Engagement Index  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity",
						"type": "String"
					},
					{
						"name": "Role Clarity  %Favorable",
						"type": "String"
					},
					{
						"name": "Resources",
						"type": "String"
					},
					{
						"name": "Resources  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat  %Favorable",
						"type": "String"
					},
					{
						"name": "Belonging",
						"type": "String"
					},
					{
						"name": "Belonging  %Favorable",
						"type": "String"
					},
					{
						"name": "Prospects",
						"type": "String"
					},
					{
						"name": "Prospects  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose Contribution",
						"type": "String"
					},
					{
						"name": "Purpose Contribution  %Favorable",
						"type": "String"
					},
					{
						"name": "Inclusion - Team",
						"type": "String"
					},
					{
						"name": "Inclusion - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Job Feedback",
						"type": "String"
					},
					{
						"name": "Job Feedback  %Favorable",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Non-Discrimination",
						"type": "String"
					},
					{
						"name": "Non-Discrimination  %Favorable",
						"type": "String"
					},
					{
						"name": "Code of Conduct",
						"type": "String"
					},
					{
						"name": "Code of Conduct  %Favorable",
						"type": "String"
					},
					{
						"name": "Health & Safety",
						"type": "String"
					},
					{
						"name": "Health & Safety  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement",
						"type": "String"
					},
					{
						"name": "Continuous Improvement  %Favorable",
						"type": "String"
					},
					{
						"name": "Empowerment",
						"type": "String"
					},
					{
						"name": "Empowerment  %Favorable",
						"type": "String"
					},
					{
						"name": "Environment",
						"type": "String"
					},
					{
						"name": "Environment  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose",
						"type": "String"
					},
					{
						"name": "Purpose  %Favorable",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_excel_source_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"parameters": {
					"folder": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"sheet_name": {
						"type": "string"
					},
					"range": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet_name",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": "input"
					},
					"range": {
						"value": "@dataset().range",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ipe')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "IPE_SubBand 2023 User_audit_report_-_Detailed_07_02_15.xls",
						"folderPath": "ipe",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "User First Name",
						"type": "String"
					},
					{
						"name": "User Last Name",
						"type": "String"
					},
					{
						"name": "User ID",
						"type": "String"
					},
					{
						"name": "Local system ID",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Date changed",
						"type": "String"
					},
					{
						"name": "Date effective",
						"type": "String"
					},
					{
						"name": "Field modified",
						"type": "String"
					},
					{
						"name": "Field type",
						"type": "String"
					},
					{
						"name": "Field changed from",
						"type": "String"
					},
					{
						"name": "Field changed to",
						"type": "String"
					},
					{
						"name": "Field changed by",
						"type": "String"
					},
					{
						"name": "Reason for change",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_leaves')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Leaves User_audit_report.xlsx",
						"folderPath": "leaves",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Respondents",
						"type": "String"
					},
					{
						"name": "ResponseRate",
						"type": "String"
					},
					{
						"name": "Culture",
						"type": "String"
					},
					{
						"name": "Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Trust - Team",
						"type": "String"
					},
					{
						"name": "Trust - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth Functional",
						"type": "String"
					},
					{
						"name": "Growth Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Career",
						"type": "String"
					},
					{
						"name": "Career  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Communication - Manager",
						"type": "String"
					},
					{
						"name": "Communication - Manager  %Favorable",
						"type": "String"
					},
					{
						"name": "Support",
						"type": "String"
					},
					{
						"name": "Support  %Favorable",
						"type": "String"
					},
					{
						"name": "Equal Opportunity",
						"type": "String"
					},
					{
						"name": "Equal Opportunity  %Favorable",
						"type": "String"
					},
					{
						"name": "Distress - Well-being",
						"type": "String"
					},
					{
						"name": "Distress - Well-being  %Favorable",
						"type": "String"
					},
					{
						"name": "Ethics Helpline",
						"type": "String"
					},
					{
						"name": "Ethics Helpline  %Favorable",
						"type": "String"
					},
					{
						"name": "Work Life Balance",
						"type": "String"
					},
					{
						"name": "Work Life Balance  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth",
						"type": "String"
					},
					{
						"name": "Growth  %Favorable",
						"type": "String"
					},
					{
						"name": "Cooperation",
						"type": "String"
					},
					{
						"name": "Cooperation  %Favorable",
						"type": "String"
					},
					{
						"name": "Initiative",
						"type": "String"
					},
					{
						"name": "Initiative  %Favorable",
						"type": "String"
					},
					{
						"name": "Decision Making",
						"type": "String"
					},
					{
						"name": "Decision Making  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index",
						"type": "String"
					},
					{
						"name": "Engagement Index  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity",
						"type": "String"
					},
					{
						"name": "Role Clarity  %Favorable",
						"type": "String"
					},
					{
						"name": "Resources",
						"type": "String"
					},
					{
						"name": "Resources  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat  %Favorable",
						"type": "String"
					},
					{
						"name": "Belonging",
						"type": "String"
					},
					{
						"name": "Belonging  %Favorable",
						"type": "String"
					},
					{
						"name": "Prospects",
						"type": "String"
					},
					{
						"name": "Prospects  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose Contribution",
						"type": "String"
					},
					{
						"name": "Purpose Contribution  %Favorable",
						"type": "String"
					},
					{
						"name": "Inclusion - Team",
						"type": "String"
					},
					{
						"name": "Inclusion - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Job Feedback",
						"type": "String"
					},
					{
						"name": "Job Feedback  %Favorable",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Non-Discrimination",
						"type": "String"
					},
					{
						"name": "Non-Discrimination  %Favorable",
						"type": "String"
					},
					{
						"name": "Code of Conduct",
						"type": "String"
					},
					{
						"name": "Code of Conduct  %Favorable",
						"type": "String"
					},
					{
						"name": "Health & Safety",
						"type": "String"
					},
					{
						"name": "Health & Safety  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement",
						"type": "String"
					},
					{
						"name": "Continuous Improvement  %Favorable",
						"type": "String"
					},
					{
						"name": "Empowerment",
						"type": "String"
					},
					{
						"name": "Empowerment  %Favorable",
						"type": "String"
					},
					{
						"name": "Environment",
						"type": "String"
					},
					{
						"name": "Environment  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose",
						"type": "String"
					},
					{
						"name": "Purpose  %Favorable",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pred_presc_01')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_evs",
								"type": "DatasetReference"
							},
							"name": "sourceExcelevs"
						},
						{
							"dataset": {
								"referenceName": "ds_abs",
								"type": "DatasetReference"
							},
							"name": "sourceexcelabs"
						},
						{
							"dataset": {
								"referenceName": "ds_ipe",
								"type": "DatasetReference"
							},
							"name": "sourceexcelipe"
						},
						{
							"dataset": {
								"referenceName": "ds_leaves",
								"type": "DatasetReference"
							},
							"name": "sourceexcelleaves"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqldevplancore",
							"description": "[[dataexporter].[devplan_core]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlrpttranscript",
							"description": "[reporting].[vw_rpt_transcript] \n"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlrptusercf",
							"description": "[[reporting].[vw_rpt_user_cf]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlsurveyresponse",
							"description": "[dbo].[SurveyResponse]\n"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlhistoricalsnapshot",
							"description": "[[datatransformation].[HistoricalSnapshot]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcedbrptperformancereview"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlsuccessionincumbent",
							"description": "vw_rpt_succession_incumbent_smp_cf"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlrptuser",
							"description": "[[reporting].[vw_users_cc]"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_file",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregateipe"
						},
						{
							"name": "joinevsrptuser"
						},
						{
							"name": "aggregateabs"
						},
						{
							"name": "joinevsrptuserabs"
						},
						{
							"name": "joinevsrptuserabsipe"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          Respondents as string,",
						"          ResponseRate as string,",
						"          Culture as string,",
						"          {Culture  %Favorable} as string,",
						"          {Trust - Team} as string,",
						"          {Trust - Team  %Favorable} as string,",
						"          {Role Clarity Functional} as string,",
						"          {Role Clarity Functional  %Favorable} as string,",
						"          {Growth Functional} as string,",
						"          {Growth Functional  %Favorable} as string,",
						"          Career as string,",
						"          {Career  %Favorable} as string,",
						"          {Continuous Improvement Functional} as string,",
						"          {Continuous Improvement Functional  %Favorable} as string,",
						"          {Communication - Manager} as string,",
						"          {Communication - Manager  %Favorable} as string,",
						"          Support as string,",
						"          {Support  %Favorable} as string,",
						"          {Equal Opportunity} as string,",
						"          {Equal Opportunity  %Favorable} as string,",
						"          {Distress - Well-being} as string,",
						"          {Distress - Well-being  %Favorable} as string,",
						"          {Ethics Helpline} as string,",
						"          {Ethics Helpline  %Favorable} as string,",
						"          {Work Life Balance} as string,",
						"          {Work Life Balance  %Favorable} as string,",
						"          Growth as string,",
						"          {Growth  %Favorable} as string,",
						"          Cooperation as string,",
						"          {Cooperation  %Favorable} as string,",
						"          Initiative as string,",
						"          {Initiative  %Favorable} as string,",
						"          {Decision Making} as string,",
						"          {Decision Making  %Favorable} as string,",
						"          {Engagement Index} as string,",
						"          {Engagement Index  %Favorable} as string,",
						"          {Engagement Index > Recommend} as string,",
						"          {Engagement Index > Recommend  %Favorable} as string,",
						"          {Role Clarity} as string,",
						"          {Role Clarity  %Favorable} as string,",
						"          Resources as string,",
						"          {Resources  %Favorable} as string,",
						"          {Engagement Index > eSat} as string,",
						"          {Engagement Index > eSat  %Favorable} as string,",
						"          Belonging as string,",
						"          {Belonging  %Favorable} as string,",
						"          Prospects as string,",
						"          {Prospects  %Favorable} as string,",
						"          {Purpose Contribution} as string,",
						"          {Purpose Contribution  %Favorable} as string,",
						"          {Inclusion - Team} as string,",
						"          {Inclusion - Team  %Favorable} as string,",
						"          {Job Feedback} as string,",
						"          {Job Feedback  %Favorable} as string,",
						"          {Consumer Focus - Culture} as string,",
						"          {Consumer Focus - Culture  %Favorable} as string,",
						"          {Non-Discrimination} as string,",
						"          {Non-Discrimination  %Favorable} as string,",
						"          {Code of Conduct} as string,",
						"          {Code of Conduct  %Favorable} as string,",
						"          {Health & Safety} as string,",
						"          {Health & Safety  %Favorable} as string,",
						"          {Continuous Improvement} as string,",
						"          {Continuous Improvement  %Favorable} as string,",
						"          Empowerment as string,",
						"          {Empowerment  %Favorable} as string,",
						"          Environment as string,",
						"          {Environment  %Favorable} as string,",
						"          Purpose as string,",
						"          {Purpose  %Favorable} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceExcelevs",
						"source(output(",
						"          {User First Name} as string,",
						"          {User Last Name} as string,",
						"          {User ID} as string,",
						"          {Local system ID} as string,",
						"          Type as string,",
						"          Status as string,",
						"          {Date changed} as string,",
						"          {Date effective} as string,",
						"          {Field modified} as string,",
						"          {Field type} as string,",
						"          {Field changed from} as string,",
						"          {Field changed to} as string,",
						"          {Field changed by} as string,",
						"          {Reason for change} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceexcelabs",
						"source(output(",
						"          {User First Name} as string,",
						"          {User Last Name} as string,",
						"          {User ID} as string,",
						"          {Local system ID} as string,",
						"          Type as string,",
						"          Status as string,",
						"          {Date changed} as string,",
						"          {Date effective} as date 'dd/MM/yyyy',",
						"          {Field modified} as string,",
						"          {Field type} as string,",
						"          {Field changed from} as string,",
						"          {Field changed to} as string,",
						"          {Field changed by} as string,",
						"          {Reason for change} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceexcelipe",
						"source(output(",
						"          ID as string,",
						"          Respondents as string,",
						"          ResponseRate as string,",
						"          Culture as string,",
						"          {Culture  %Favorable} as string,",
						"          {Trust - Team} as string,",
						"          {Trust - Team  %Favorable} as string,",
						"          {Role Clarity Functional} as string,",
						"          {Role Clarity Functional  %Favorable} as string,",
						"          {Growth Functional} as string,",
						"          {Growth Functional  %Favorable} as string,",
						"          Career as string,",
						"          {Career  %Favorable} as string,",
						"          {Continuous Improvement Functional} as string,",
						"          {Continuous Improvement Functional  %Favorable} as string,",
						"          {Communication - Manager} as string,",
						"          {Communication - Manager  %Favorable} as string,",
						"          Support as string,",
						"          {Support  %Favorable} as string,",
						"          {Equal Opportunity} as string,",
						"          {Equal Opportunity  %Favorable} as string,",
						"          {Distress - Well-being} as string,",
						"          {Distress - Well-being  %Favorable} as string,",
						"          {Ethics Helpline} as string,",
						"          {Ethics Helpline  %Favorable} as string,",
						"          {Work Life Balance} as string,",
						"          {Work Life Balance  %Favorable} as string,",
						"          Growth as string,",
						"          {Growth  %Favorable} as string,",
						"          Cooperation as string,",
						"          {Cooperation  %Favorable} as string,",
						"          Initiative as string,",
						"          {Initiative  %Favorable} as string,",
						"          {Decision Making} as string,",
						"          {Decision Making  %Favorable} as string,",
						"          {Engagement Index} as string,",
						"          {Engagement Index  %Favorable} as string,",
						"          {Engagement Index > Recommend} as string,",
						"          {Engagement Index > Recommend  %Favorable} as string,",
						"          {Role Clarity} as string,",
						"          {Role Clarity  %Favorable} as string,",
						"          Resources as string,",
						"          {Resources  %Favorable} as string,",
						"          {Engagement Index > eSat} as string,",
						"          {Engagement Index > eSat  %Favorable} as string,",
						"          Belonging as string,",
						"          {Belonging  %Favorable} as string,",
						"          Prospects as string,",
						"          {Prospects  %Favorable} as string,",
						"          {Purpose Contribution} as string,",
						"          {Purpose Contribution  %Favorable} as string,",
						"          {Inclusion - Team} as string,",
						"          {Inclusion - Team  %Favorable} as string,",
						"          {Job Feedback} as string,",
						"          {Job Feedback  %Favorable} as string,",
						"          {Consumer Focus - Culture} as string,",
						"          {Consumer Focus - Culture  %Favorable} as string,",
						"          {Non-Discrimination} as string,",
						"          {Non-Discrimination  %Favorable} as string,",
						"          {Code of Conduct} as string,",
						"          {Code of Conduct  %Favorable} as string,",
						"          {Health & Safety} as string,",
						"          {Health & Safety  %Favorable} as string,",
						"          {Continuous Improvement} as string,",
						"          {Continuous Improvement  %Favorable} as string,",
						"          Empowerment as string,",
						"          {Empowerment  %Favorable} as string,",
						"          Environment as string,",
						"          {Environment  %Favorable} as string,",
						"          Purpose as string,",
						"          {Purpose  %Favorable} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceexcelleaves",
						"source(output(",
						"          count_devplan_id as integer,",
						"          assigned_user_id as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT count( distinct [devplan_id]) count_devplan_id,\\n      [assigned_user_id],year(devplan_created_dt) year\\n      FROM [dataexporter].[devplan_core] group by\\n  year(devplan_created_dt),[assigned_user_id]',",
						"     format: 'query') ~> sourcesqldevplancore",
						"source(output(",
						"          count_transc_obj_id as integer,",
						"          year as integer,",
						"          trans_user_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT count(distinct transc_object_id) count_transc_obj_id\\n      ,year([user_lo_create_dt]) year    \\n      ,[transc_user_id] trans_user_id     \\n  FROM [reporting].[vw_rpt_transcript] where year([user_lo_create_dt])>2018 \\n  group by year([user_lo_create_dt])    \\n      ,[transc_user_id] \\n',",
						"     format: 'query') ~> sourcesqlrpttranscript",
						"source(output(",
						"          user_cf_user_id as integer,",
						"          current_abs_compa_ratio as double,",
						"          current_ttc_compa_ratio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [user_cf_user_id]     \\n      ,[current_abs_compa_ratio]     \\n      ,[current_ttc_compa_ratio]     \\n  FROM [reporting].[vw_rpt_user_cf] where current_abs_compa_ratio is not null',",
						"     format: 'query') ~> sourcesqlrptusercf",
						"source(output(",
						"          RespondersEmail as string,",
						"          QuestionTitle as string,",
						"          Answer as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n      [RespondersEmail]      \\n      ,[QuestionTitle]     \\n      ,[Answer]\\n  FROM [dbo].[SurveyResponse] where CreatedBy like \\'%ee4%\\' and QuestionID=\\'4\\'',",
						"     format: 'query') ~> sourcesqlsurveyresponse",
						"source(output(",
						"          Id as long,",
						"          user_id as string,",
						"          division as string,",
						"          job_family as string,",
						"          functional_area as string,",
						"          reason_for_leaving as string,",
						"          termination_type as string,",
						"          termination_date as timestamp,",
						"          original_hire_date as timestamp,",
						"          electrolux_legal_entity as string,",
						"          organizational_area as string,",
						"          region as string,",
						"          tier_level as integer,",
						"          job_level_sub_band as string,",
						"          job_level_band as string,",
						"          employee_nationality as string,",
						"          is_line_manager as string,",
						"          country_of_location as string,",
						"          employee_type as string,",
						"          date_of_birth as timestamp,",
						"          employee_gender as string,",
						"          job_family_id as integer,",
						"          job_family_ref as string,",
						"          manager_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nSELECT [Id]\\n      ,[user_id]\\n      ,[division]\\n      ,[job_family]\\n      ,[functional_area]\\n      ,[reason_for_leaving]\\n      ,[termination_type]\\n      ,[termination_date]\\n      ,[original_hire_date]\\n      ,[electrolux_legal_entity]\\n      ,[organizational_area]\\n      ,[region]\\n      ,[tier_level]\\n      ,[job_level_sub_band]\\n      ,[job_level_band]\\n      ,[employee_nationality]\\n      ,[is_line_manager]\\n      ,[country_of_location]\\n      ,[employee_type]\\n      ,[date_of_birth]\\n      ,[employee_gender]\\n      ,[job_family_id]\\n      ,[job_family_ref]\\n      ,[manager_id]\\n  FROM [datatransformation].[HistoricalSnapshot]\\n',",
						"     format: 'query') ~> sourcesqlhistoricalsnapshot",
						"source(output(",
						"          user_id as integer,",
						"          year as string,",
						"          task_user_override as decimal(18,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [user_id]\\n      ,right([task_name],4) year\\n      ,[task_user_override]\\n        FROM [reporting].[vw_rpt_performance_review]',",
						"     format: 'query') ~> sourcedbrptperformancereview",
						"source(output(",
						"          user_id as integer,",
						"          task_id as integer,",
						"          rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [warehouse_smp_custom_fields_user_id] user_id\\n      ,[warehouse_smp_custom_fields_task_id] task_id\\n      ,RIGHT([smp_custom_field_02133],4) rating\\n  FROM [reporting].[vw_rpt_succession_incumbent_smp_cf]',",
						"     format: 'query') ~> sourcesqlsuccessionincumbent",
						"source(output(",
						"          {User ID Technical} as integer,",
						"          {User Id} as string,",
						"          {SAP ID} as string,",
						"          {User Full Name} as string,",
						"          {Original Hire Date} as string,",
						"          {Job Title} as string,",
						"          {Manager Ref} as string,",
						"          {Manager Full Name} as string,",
						"          Region as string,",
						"          {Country Of Payroll} as string,",
						"          {Country of Location} as string,",
						"          {User Status} as string,",
						"          {Employment Status} as string,",
						"          {Termination Date} as string,",
						"          {Functional Area} as string,",
						"          {Full time/Part time} as string,",
						"          {Work Time / Capacity %} as double,",
						"          {Cost Centre} as string,",
						"          {Electrolux Legal Entity} as string,",
						"          {Individual IPE Ref} as string,",
						"          {Electrolux Legal Entity Ref} as string,",
						"          {Division ID} as integer,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from reporting.vw_users_cc',",
						"     format: 'query') ~> sourcesqlrptuser",
						"sourceexcelipe aggregate(groupBy({User ID}),",
						"     {Date position changed} = max({Date effective})) ~> aggregateipe",
						"sourceExcelevs, sourcesqlrptuser join(ID == {Manager Ref},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinevsrptuser",
						"sourceexcelabs aggregate(groupBy({User ID}),",
						"     {Max Effective Date} = max({Date effective})) ~> aggregateabs",
						"joinevsrptuser, aggregateabs join(sourcesqlrptuser@{User Id} == aggregateabs@{User ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinevsrptuserabs",
						"joinevsrptuserabs, aggregateipe join(sourcesqlrptuser@{User Id} == aggregateipe@{User ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinevsrptuserabsipe",
						"joinevsrptuserabsipe sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_evs')]",
				"[concat(variables('factoryId'), '/datasets/ds_abs')]",
				"[concat(variables('factoryId'), '/datasets/ds_ipe')]",
				"[concat(variables('factoryId'), '/datasets/ds_leaves')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_users_cc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "vwuserscc",
							"description": "[[reporting].[vw_users_cc]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "vwuserhierarchy",
							"description": "[[reporting].[vw_user_hierarchy_cc]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "vwdivisionhierarchy",
							"description": "[[reporting].[vw_division_hierarchy_cc]"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_file",
								"type": "DatasetReference"
							},
							"name": "sinktocsv"
						}
					],
					"transformations": [
						{
							"name": "joinusershierarchy"
						},
						{
							"name": "joinusersdivision"
						},
						{
							"name": "selectneededfields"
						},
						{
							"name": "filterregion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {User ID Technical} as integer,",
						"          {User Id} as string,",
						"          {SAP ID} as string,",
						"          {User Full Name} as string,",
						"          {Original Hire Date} as date,",
						"          {Job Title} as string,",
						"          {Manager Full Name} as string,",
						"          Region as string,",
						"          {Country Of Payroll} as string,",
						"          {Country of Location} as string,",
						"          {User Status} as string,",
						"          {Employment Status} as string,",
						"          {Termination Date} as date,",
						"          {Functional Area} as string,",
						"          {Full time/Part time} as string,",
						"          {Work Time / Capacity %} as double,",
						"          {Cost Centre} as string,",
						"          {Electrolux Legal Entity} as string,",
						"          {Individual IPE Ref} as string,",
						"          {Electrolux Legal Entity Ref} as string,",
						"          {Division ID} as integer,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT  [User ID Technical]\\n      ,[User Id]\\n      ,[SAP ID]\\n      ,[User Full Name]\\n      ,[Original Hire Date]\\n      ,[Job Title]\\n      ,[Manager Full Name]\\n      ,[Region]\\n      ,[Country Of Payroll]\\n      ,[Country of Location]\\n      ,[User Status]\\n      ,[Employment Status]\\n      ,[Termination Date]\\n      ,[Functional Area]\\n      ,[Full time/Part time]\\n      ,[Work Time / Capacity %]\\n      ,[Cost Centre]\\n      ,[Electrolux Legal Entity]\\n      ,[Individual IPE Ref]\\n      ,[Electrolux Legal Entity Ref]\\n      ,[Division ID]\\n      ,[Division]\\n  FROM [reporting].[vw_users_cc]',",
						"     format: 'query') ~> vwuserscc",
						"source(output(",
						"          {User ID Technical} as integer,",
						"          Name_Path as string,",
						"          {User Name1} as string,",
						"          {User Name2} as string,",
						"          {User Name3} as string,",
						"          {User Name4} as string,",
						"          {User Name5} as string,",
						"          {User Name6} as string,",
						"          {User Name7} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [User ID Technical]\\n      ,[Name_Path]\\n      ,[User Name1]\\n      ,[User Name2]\\n      ,[User Name3]\\n      ,[User Name4]\\n      ,[User Name5]\\n      ,[User Name6]\\n      ,[User Name7]\\n  FROM [reporting].[vw_user_hierarchy_cc]',",
						"     format: 'query') ~> vwuserhierarchy",
						"source(output(",
						"          {Division ID} as integer,",
						"          {Division Name} as string,",
						"          {Division Name1} as string,",
						"          {Division Name2} as string,",
						"          {Division Name3} as string,",
						"          {Division Name4} as string,",
						"          {Division Name5} as string,",
						"          {Division Name6} as string,",
						"          {Division Name7} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [Division ID]\\n      ,[Division Name]\\n      ,[Division Name1]\\n      ,[Division Name2]\\n      ,[Division Name3]\\n      ,[Division Name4]\\n      ,[Division Name5]\\n      ,[Division Name6]\\n      ,[Division Name7]\\n  FROM [reporting].[vw_division_hierarchy_cc]',",
						"     format: 'query') ~> vwdivisionhierarchy",
						"filterregion, vwuserhierarchy join(vwuserscc@{User ID Technical} == vwuserhierarchy@{User ID Technical},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinusershierarchy",
						"joinusershierarchy, vwdivisionhierarchy join(vwuserscc@{Division ID} == vwdivisionhierarchy@{Division ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinusersdivision",
						"joinusersdivision select(mapColumn(",
						"          {User Id},",
						"          {SAP ID},",
						"          {User Full Name},",
						"          {Original Hire Date},",
						"          {Job Title},",
						"          {Manager Full Name},",
						"          Region,",
						"          {Country Of Payroll},",
						"          {Country of Location},",
						"          {User Status},",
						"          {Employment Status},",
						"          {Termination Date},",
						"          {Functional Area},",
						"          {Full time/Part time},",
						"          {Work Time / Capacity %},",
						"          {Cost Centre},",
						"          {Electrolux Legal Entity},",
						"          {Electrolux Legal Entity Ref},",
						"          Division,",
						"          {Division Name1},",
						"          {Division Name2},",
						"          {Division Name3},",
						"          {Division Name4},",
						"          {Division Name5},",
						"          {Division Name6},",
						"          {Division Name7},",
						"          {User Name1},",
						"          {User Name2},",
						"          {User Name3},",
						"          {User Name4},",
						"          {User Name5},",
						"          {User Name6},",
						"          {User Name7}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectneededfields",
						"vwuserscc filter(Region=='North America') ~> filterregion",
						"selectneededfields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat('userscostcenter',toString(currentDate()),'.csv')\r",
						"\r",
						")],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          user_id = {User Id},",
						"          sap_id = {SAP ID},",
						"          user_full_name = {User Full Name},",
						"          original_hire_date = {Original Hire Date},",
						"          job_title = {Job Title},",
						"          manager_full_name = {Manager Full Name},",
						"          region = Region,",
						"          country_of_payroll = {Country Of Payroll},",
						"          country_of_location = {Country of Location},",
						"          user_status = {User Status},",
						"          employment_status = {Employment Status},",
						"          termination_date = {Termination Date},",
						"          functional_area = {Functional Area},",
						"          full_time_part_time = {Full time/Part time},",
						"          work_time_capacity = {Work Time / Capacity %},",
						"          cost_centre = {Cost Centre},",
						"          electrolux_legal_entity = {Electrolux Legal Entity},",
						"          electrolux_legal_entity_ref = {Electrolux Legal Entity Ref},",
						"          division = Division,",
						"          division_name1 = {Division Name1},",
						"          division_name2 = {Division Name2},",
						"          division_name3 = {Division Name3},",
						"          division_name4 = {Division Name4},",
						"          division_name5 = {Division Name5},",
						"          division_name6 = {Division Name6},",
						"          division_name7 = {Division Name7},",
						"          user_name1 = {User Name1},",
						"          user_name2 = {User Name2},",
						"          user_name3 = {User Name3},",
						"          user_name4 = {User Name4},",
						"          user_name5 = {User Name5},",
						"          user_name6 = {User Name6},",
						"          user_name7 = {User Name7}",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinktocsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_users_cc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_users_cc",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_users_cc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"vwuserscc": {},
									"vwuserhierarchy": {},
									"vwdivisionhierarchy": {},
									"sinktocsv": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-23T18:53:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_users_cc')]"
			]
		}
	]
}
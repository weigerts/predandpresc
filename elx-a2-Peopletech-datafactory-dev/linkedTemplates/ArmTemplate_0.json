{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "elx-a2-Peopletech-datafactory-dev"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().db_server_name};Initial Catalog=@{linkedService().db_name};User ID=@{linkedService().db_user}"
		},
		"ls_key_vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().kv_url}"
		},
		"ls_data_lake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url}"
		},
		"ls_elxa2ns002prd_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "saelxa2ns0002prd-connection"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_key_vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kv_url": {
						"type": "string",
						"defaultValue": "https://elx-a2-ppltech-kv-dev.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_key_vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"db_server_name": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_user": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_key_vault",
							"type": "LinkedServiceReference",
							"parameters": {
								"kv_url": "https://elx-a2-hrhub-kv-prod.vault.azure.net/"
							}
						},
						"secretName": "DatabaseSQLPassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_data_lake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_data_lake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_key_vault",
							"type": "LinkedServiceReference",
							"parameters": {
								"kv_url": "https://elx-a2-ppltech-kv-dev.vault.azure.net/"
							}
						},
						"secretName": "storage-account-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_elxa2ns002prd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_key_vault",
							"type": "LinkedServiceReference",
							"parameters": {
								"kv_url": "https://elx-a2-ppltech-kv-dev.vault.azure.net/"
							}
						},
						"secretName": "[parameters('ls_elxa2ns002prd_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential1')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ServicePrincipal",
				"typeProperties": {
					"tenant": "d2007bef-127d-4591-97ac-10d72fe28031",
					"servicePrincipalId": "e01f03e0-81f1-43f2-8caa-59638586ff3c",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_key_vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "saelxa2ns0002prd-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_abs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ABS 2023 User_audit_report.xls",
						"folderPath": "abs",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "User First Name",
						"type": "String"
					},
					{
						"name": "User Last Name",
						"type": "String"
					},
					{
						"name": "User ID",
						"type": "String"
					},
					{
						"name": "Local system ID",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Date changed",
						"type": "String"
					},
					{
						"name": "Date effective",
						"type": "String"
					},
					{
						"name": "Field modified",
						"type": "String"
					},
					{
						"name": "Field type",
						"type": "String"
					},
					{
						"name": "Field changed from",
						"type": "String"
					},
					{
						"name": "Field changed to",
						"type": "String"
					},
					{
						"name": "Field changed by",
						"type": "String"
					},
					{
						"name": "Reason for change",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference",
					"parameters": {
						"db_server_name": "elx-a2-hrhub-sql-prod.database.windows.net",
						"db_name": "elx-a2-hrhub-sqldb-prod",
						"db_user": "dhradmin"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cost_center.csv",
						"fileSystem": "costcenter"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_delta_evs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/predandpresc1",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "respondents",
						"type": "INT32"
					},
					{
						"name": "responserate",
						"type": "INT32"
					},
					{
						"name": "culture",
						"type": "INT32"
					},
					{
						"name": "culture_per_favorable",
						"type": "INT32"
					},
					{
						"name": "trust_team",
						"type": "INT32"
					},
					{
						"name": "trust_team_per_favorable",
						"type": "INT32"
					},
					{
						"name": "role_clarity_functional",
						"type": "UTF8"
					},
					{
						"name": "role_clarity_functional_per_favorable",
						"type": "UTF8"
					},
					{
						"name": "growth_functional",
						"type": "UTF8"
					},
					{
						"name": "growth_functional_per_favorable",
						"type": "UTF8"
					},
					{
						"name": "career",
						"type": "INT32"
					},
					{
						"name": "career_per_favorable",
						"type": "INT32"
					},
					{
						"name": "continuous_improvement_functional",
						"type": "UTF8"
					},
					{
						"name": "continuous_improvement_functional_per_favorable",
						"type": "UTF8"
					},
					{
						"name": "communication_manager",
						"type": "INT32"
					},
					{
						"name": "communication_manager_per_favorable",
						"type": "INT32"
					},
					{
						"name": "support",
						"type": "INT32"
					},
					{
						"name": "support_per_favorable",
						"type": "INT32"
					},
					{
						"name": "equal_opportunity",
						"type": "INT32"
					},
					{
						"name": "equal_opportunity_per_favorable",
						"type": "INT32"
					},
					{
						"name": "distress_well-being",
						"type": "INT32"
					},
					{
						"name": "distress_well-being_per_favorable",
						"type": "INT32"
					},
					{
						"name": "ethics_helpline",
						"type": "INT32"
					},
					{
						"name": "ethics_helpline_per_favorable",
						"type": "INT32"
					},
					{
						"name": "work_life_balance",
						"type": "INT32"
					},
					{
						"name": "work_life_balance_per_favorable",
						"type": "INT32"
					},
					{
						"name": "growth",
						"type": "INT32"
					},
					{
						"name": "growth_per_favorable",
						"type": "INT32"
					},
					{
						"name": "cooperation",
						"type": "INT32"
					},
					{
						"name": "cooperation_per_favorable",
						"type": "INT32"
					},
					{
						"name": "initiative",
						"type": "INT32"
					},
					{
						"name": "initiative_per_favorable",
						"type": "INT32"
					},
					{
						"name": "decision_making",
						"type": "INT32"
					},
					{
						"name": "decision_making_per_favorable",
						"type": "INT32"
					},
					{
						"name": "engagement_index",
						"type": "INT32"
					},
					{
						"name": "engagement_index_per_favorable",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_recommend",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_recommend_per_favorable",
						"type": "INT32"
					},
					{
						"name": "role_clarity",
						"type": "INT32"
					},
					{
						"name": "role_clarity_per_favorable",
						"type": "INT32"
					},
					{
						"name": "resources",
						"type": "INT32"
					},
					{
						"name": "resources_per_favorable",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_esat",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_esat_per_favorable",
						"type": "INT32"
					},
					{
						"name": "belonging",
						"type": "INT32"
					},
					{
						"name": "belonging_per_favorable",
						"type": "INT32"
					},
					{
						"name": "prospects",
						"type": "INT32"
					},
					{
						"name": "prospects_per_favorable",
						"type": "INT32"
					},
					{
						"name": "purpose_contribution",
						"type": "INT32"
					},
					{
						"name": "purpose_contribution_per_favorable",
						"type": "INT32"
					},
					{
						"name": "inclusion_team",
						"type": "INT32"
					},
					{
						"name": "inclusion_team_per_favorable",
						"type": "INT32"
					},
					{
						"name": "job_feedback",
						"type": "INT32"
					},
					{
						"name": "job_feedback_per_favorable",
						"type": "INT32"
					},
					{
						"name": "consumer_focus_culture",
						"type": "INT32"
					},
					{
						"name": "consumer_focus_culture_per_favorable",
						"type": "INT32"
					},
					{
						"name": "non-discrimination",
						"type": "INT32"
					},
					{
						"name": "non-discrimination_per_favorable",
						"type": "INT32"
					},
					{
						"name": "code_of_conduct",
						"type": "INT32"
					},
					{
						"name": "code_of_conduct_per_favorable",
						"type": "INT32"
					},
					{
						"name": "health_&_safety",
						"type": "INT32"
					},
					{
						"name": "health_&_safety_per_favorable",
						"type": "INT32"
					},
					{
						"name": "continuous_improvement",
						"type": "INT32"
					},
					{
						"name": "continuous_improvement_per_favorable",
						"type": "INT32"
					},
					{
						"name": "empowerment",
						"type": "INT32"
					},
					{
						"name": "empowerment_per_favorable",
						"type": "INT32"
					},
					{
						"name": "environment",
						"type": "INT32"
					},
					{
						"name": "environment_per_favorable",
						"type": "INT32"
					},
					{
						"name": "purpose",
						"type": "INT32"
					},
					{
						"name": "purpose_per_favorable",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_delta_predandpresc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/predpresc",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "respondents",
						"type": "INT32"
					},
					{
						"name": "responserate",
						"type": "INT32"
					},
					{
						"name": "culture",
						"type": "INT32"
					},
					{
						"name": "culture_per_favorable",
						"type": "INT32"
					},
					{
						"name": "trust_team",
						"type": "INT32"
					},
					{
						"name": "trust_team_per_favorable",
						"type": "INT32"
					},
					{
						"name": "role_clarity_functional",
						"type": "UTF8"
					},
					{
						"name": "role_clarity_functional_per_favorable",
						"type": "UTF8"
					},
					{
						"name": "growth_functional",
						"type": "UTF8"
					},
					{
						"name": "growth_functional_per_favorable",
						"type": "UTF8"
					},
					{
						"name": "career",
						"type": "INT32"
					},
					{
						"name": "career_per_favorable",
						"type": "INT32"
					},
					{
						"name": "continuous_improvement_functional",
						"type": "UTF8"
					},
					{
						"name": "continuous_improvement_functional_per_favorable",
						"type": "UTF8"
					},
					{
						"name": "communication_manager",
						"type": "INT32"
					},
					{
						"name": "communication_manager_per_favorable",
						"type": "INT32"
					},
					{
						"name": "support",
						"type": "INT32"
					},
					{
						"name": "support_per_favorable",
						"type": "INT32"
					},
					{
						"name": "equal_opportunity",
						"type": "INT32"
					},
					{
						"name": "equal_opportunity_per_favorable",
						"type": "INT32"
					},
					{
						"name": "distress_well-being",
						"type": "INT32"
					},
					{
						"name": "distress_well-being_per_favorable",
						"type": "INT32"
					},
					{
						"name": "ethics_helpline",
						"type": "INT32"
					},
					{
						"name": "ethics_helpline_per_favorable",
						"type": "INT32"
					},
					{
						"name": "work_life_balance",
						"type": "INT32"
					},
					{
						"name": "work_life_balance_per_favorable",
						"type": "INT32"
					},
					{
						"name": "growth",
						"type": "INT32"
					},
					{
						"name": "growth_per_favorable",
						"type": "INT32"
					},
					{
						"name": "cooperation",
						"type": "INT32"
					},
					{
						"name": "cooperation_per_favorable",
						"type": "INT32"
					},
					{
						"name": "initiative",
						"type": "INT32"
					},
					{
						"name": "initiative_per_favorable",
						"type": "INT32"
					},
					{
						"name": "decision_making",
						"type": "INT32"
					},
					{
						"name": "decision_making_per_favorable",
						"type": "INT32"
					},
					{
						"name": "engagement_index",
						"type": "INT32"
					},
					{
						"name": "engagement_index_per_favorable",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_recommend",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_recommend_per_favorable",
						"type": "INT32"
					},
					{
						"name": "role_clarity",
						"type": "INT32"
					},
					{
						"name": "role_clarity_per_favorable",
						"type": "INT32"
					},
					{
						"name": "resources",
						"type": "INT32"
					},
					{
						"name": "resources_per_favorable",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_esat",
						"type": "INT32"
					},
					{
						"name": "engagement_index_>_esat_per_favorable",
						"type": "INT32"
					},
					{
						"name": "belonging",
						"type": "INT32"
					},
					{
						"name": "belonging_per_favorable",
						"type": "INT32"
					},
					{
						"name": "prospects",
						"type": "INT32"
					},
					{
						"name": "prospects_per_favorable",
						"type": "INT32"
					},
					{
						"name": "purpose_contribution",
						"type": "INT32"
					},
					{
						"name": "purpose_contribution_per_favorable",
						"type": "INT32"
					},
					{
						"name": "inclusion_team",
						"type": "INT32"
					},
					{
						"name": "inclusion_team_per_favorable",
						"type": "INT32"
					},
					{
						"name": "job_feedback",
						"type": "INT32"
					},
					{
						"name": "job_feedback_per_favorable",
						"type": "INT32"
					},
					{
						"name": "consumer_focus_culture",
						"type": "INT32"
					},
					{
						"name": "consumer_focus_culture_per_favorable",
						"type": "INT32"
					},
					{
						"name": "non-discrimination",
						"type": "INT32"
					},
					{
						"name": "non-discrimination_per_favorable",
						"type": "INT32"
					},
					{
						"name": "code_of_conduct",
						"type": "INT32"
					},
					{
						"name": "code_of_conduct_per_favorable",
						"type": "INT32"
					},
					{
						"name": "health_&_safety",
						"type": "INT32"
					},
					{
						"name": "health_&_safety_per_favorable",
						"type": "INT32"
					},
					{
						"name": "continuous_improvement",
						"type": "INT32"
					},
					{
						"name": "continuous_improvement_per_favorable",
						"type": "INT32"
					},
					{
						"name": "empowerment",
						"type": "INT32"
					},
					{
						"name": "empowerment_per_favorable",
						"type": "INT32"
					},
					{
						"name": "environment",
						"type": "INT32"
					},
					{
						"name": "environment_per_favorable",
						"type": "INT32"
					},
					{
						"name": "purpose",
						"type": "INT32"
					},
					{
						"name": "purpose_per_favorable",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_elxa2ns0002prd_dev')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_elxa2ns002prd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sga-devtst"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_elxa2ns002prd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_evs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EVS.xlsx",
						"folderPath": "evs",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Respondents",
						"type": "String"
					},
					{
						"name": "ResponseRate",
						"type": "String"
					},
					{
						"name": "Culture",
						"type": "String"
					},
					{
						"name": "Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Trust - Team",
						"type": "String"
					},
					{
						"name": "Trust - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth Functional",
						"type": "String"
					},
					{
						"name": "Growth Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Career",
						"type": "String"
					},
					{
						"name": "Career  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Communication - Manager",
						"type": "String"
					},
					{
						"name": "Communication - Manager  %Favorable",
						"type": "String"
					},
					{
						"name": "Support",
						"type": "String"
					},
					{
						"name": "Support  %Favorable",
						"type": "String"
					},
					{
						"name": "Equal Opportunity",
						"type": "String"
					},
					{
						"name": "Equal Opportunity  %Favorable",
						"type": "String"
					},
					{
						"name": "Distress - Well-being",
						"type": "String"
					},
					{
						"name": "Distress - Well-being  %Favorable",
						"type": "String"
					},
					{
						"name": "Ethics Helpline",
						"type": "String"
					},
					{
						"name": "Ethics Helpline  %Favorable",
						"type": "String"
					},
					{
						"name": "Work Life Balance",
						"type": "String"
					},
					{
						"name": "Work Life Balance  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth",
						"type": "String"
					},
					{
						"name": "Growth  %Favorable",
						"type": "String"
					},
					{
						"name": "Cooperation",
						"type": "String"
					},
					{
						"name": "Cooperation  %Favorable",
						"type": "String"
					},
					{
						"name": "Initiative",
						"type": "String"
					},
					{
						"name": "Initiative  %Favorable",
						"type": "String"
					},
					{
						"name": "Decision Making",
						"type": "String"
					},
					{
						"name": "Decision Making  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index",
						"type": "String"
					},
					{
						"name": "Engagement Index  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity",
						"type": "String"
					},
					{
						"name": "Role Clarity  %Favorable",
						"type": "String"
					},
					{
						"name": "Resources",
						"type": "String"
					},
					{
						"name": "Resources  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat  %Favorable",
						"type": "String"
					},
					{
						"name": "Belonging",
						"type": "String"
					},
					{
						"name": "Belonging  %Favorable",
						"type": "String"
					},
					{
						"name": "Prospects",
						"type": "String"
					},
					{
						"name": "Prospects  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose Contribution",
						"type": "String"
					},
					{
						"name": "Purpose Contribution  %Favorable",
						"type": "String"
					},
					{
						"name": "Inclusion - Team",
						"type": "String"
					},
					{
						"name": "Inclusion - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Job Feedback",
						"type": "String"
					},
					{
						"name": "Job Feedback  %Favorable",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Non-Discrimination",
						"type": "String"
					},
					{
						"name": "Non-Discrimination  %Favorable",
						"type": "String"
					},
					{
						"name": "Code of Conduct",
						"type": "String"
					},
					{
						"name": "Code of Conduct  %Favorable",
						"type": "String"
					},
					{
						"name": "Health & Safety",
						"type": "String"
					},
					{
						"name": "Health & Safety  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement",
						"type": "String"
					},
					{
						"name": "Continuous Improvement  %Favorable",
						"type": "String"
					},
					{
						"name": "Empowerment",
						"type": "String"
					},
					{
						"name": "Empowerment  %Favorable",
						"type": "String"
					},
					{
						"name": "Environment",
						"type": "String"
					},
					{
						"name": "Environment  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose",
						"type": "String"
					},
					{
						"name": "Purpose  %Favorable",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_excel_source_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"parameters": {
					"folder": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"sheet_name": {
						"type": "string"
					},
					"range": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet_name",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": "input"
					},
					"range": {
						"value": "@dataset().range",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ipe')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "IPE_SubBand 2023 User_audit_report_-_Detailed_07_02_15.xls",
						"folderPath": "ipe",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "User First Name",
						"type": "String"
					},
					{
						"name": "User Last Name",
						"type": "String"
					},
					{
						"name": "User ID",
						"type": "String"
					},
					{
						"name": "Local system ID",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Date changed",
						"type": "String"
					},
					{
						"name": "Date effective",
						"type": "String"
					},
					{
						"name": "Field modified",
						"type": "String"
					},
					{
						"name": "Field type",
						"type": "String"
					},
					{
						"name": "Field changed from",
						"type": "String"
					},
					{
						"name": "Field changed to",
						"type": "String"
					},
					{
						"name": "Field changed by",
						"type": "String"
					},
					{
						"name": "Reason for change",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_leaves')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Leaves User_audit_report.xlsx",
						"folderPath": "leaves",
						"fileSystem": "raw"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Respondents",
						"type": "String"
					},
					{
						"name": "ResponseRate",
						"type": "String"
					},
					{
						"name": "Culture",
						"type": "String"
					},
					{
						"name": "Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Trust - Team",
						"type": "String"
					},
					{
						"name": "Trust - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional",
						"type": "String"
					},
					{
						"name": "Role Clarity Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth Functional",
						"type": "String"
					},
					{
						"name": "Growth Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Career",
						"type": "String"
					},
					{
						"name": "Career  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional",
						"type": "String"
					},
					{
						"name": "Continuous Improvement Functional  %Favorable",
						"type": "String"
					},
					{
						"name": "Communication - Manager",
						"type": "String"
					},
					{
						"name": "Communication - Manager  %Favorable",
						"type": "String"
					},
					{
						"name": "Support",
						"type": "String"
					},
					{
						"name": "Support  %Favorable",
						"type": "String"
					},
					{
						"name": "Equal Opportunity",
						"type": "String"
					},
					{
						"name": "Equal Opportunity  %Favorable",
						"type": "String"
					},
					{
						"name": "Distress - Well-being",
						"type": "String"
					},
					{
						"name": "Distress - Well-being  %Favorable",
						"type": "String"
					},
					{
						"name": "Ethics Helpline",
						"type": "String"
					},
					{
						"name": "Ethics Helpline  %Favorable",
						"type": "String"
					},
					{
						"name": "Work Life Balance",
						"type": "String"
					},
					{
						"name": "Work Life Balance  %Favorable",
						"type": "String"
					},
					{
						"name": "Growth",
						"type": "String"
					},
					{
						"name": "Growth  %Favorable",
						"type": "String"
					},
					{
						"name": "Cooperation",
						"type": "String"
					},
					{
						"name": "Cooperation  %Favorable",
						"type": "String"
					},
					{
						"name": "Initiative",
						"type": "String"
					},
					{
						"name": "Initiative  %Favorable",
						"type": "String"
					},
					{
						"name": "Decision Making",
						"type": "String"
					},
					{
						"name": "Decision Making  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index",
						"type": "String"
					},
					{
						"name": "Engagement Index  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend",
						"type": "String"
					},
					{
						"name": "Engagement Index > Recommend  %Favorable",
						"type": "String"
					},
					{
						"name": "Role Clarity",
						"type": "String"
					},
					{
						"name": "Role Clarity  %Favorable",
						"type": "String"
					},
					{
						"name": "Resources",
						"type": "String"
					},
					{
						"name": "Resources  %Favorable",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat",
						"type": "String"
					},
					{
						"name": "Engagement Index > eSat  %Favorable",
						"type": "String"
					},
					{
						"name": "Belonging",
						"type": "String"
					},
					{
						"name": "Belonging  %Favorable",
						"type": "String"
					},
					{
						"name": "Prospects",
						"type": "String"
					},
					{
						"name": "Prospects  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose Contribution",
						"type": "String"
					},
					{
						"name": "Purpose Contribution  %Favorable",
						"type": "String"
					},
					{
						"name": "Inclusion - Team",
						"type": "String"
					},
					{
						"name": "Inclusion - Team  %Favorable",
						"type": "String"
					},
					{
						"name": "Job Feedback",
						"type": "String"
					},
					{
						"name": "Job Feedback  %Favorable",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture",
						"type": "String"
					},
					{
						"name": "Consumer Focus - Culture  %Favorable",
						"type": "String"
					},
					{
						"name": "Non-Discrimination",
						"type": "String"
					},
					{
						"name": "Non-Discrimination  %Favorable",
						"type": "String"
					},
					{
						"name": "Code of Conduct",
						"type": "String"
					},
					{
						"name": "Code of Conduct  %Favorable",
						"type": "String"
					},
					{
						"name": "Health & Safety",
						"type": "String"
					},
					{
						"name": "Health & Safety  %Favorable",
						"type": "String"
					},
					{
						"name": "Continuous Improvement",
						"type": "String"
					},
					{
						"name": "Continuous Improvement  %Favorable",
						"type": "String"
					},
					{
						"name": "Empowerment",
						"type": "String"
					},
					{
						"name": "Empowerment  %Favorable",
						"type": "String"
					},
					{
						"name": "Environment",
						"type": "String"
					},
					{
						"name": "Environment  %Favorable",
						"type": "String"
					},
					{
						"name": "Purpose",
						"type": "String"
					},
					{
						"name": "Purpose  %Favorable",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_data_lake",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": "https://elxa2peopletechdev01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_data_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pred_presc_01')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_evs",
								"type": "DatasetReference"
							},
							"name": "sourceExcelevs"
						},
						{
							"dataset": {
								"referenceName": "ds_abs",
								"type": "DatasetReference"
							},
							"name": "sourceexcelabs"
						},
						{
							"dataset": {
								"referenceName": "ds_ipe",
								"type": "DatasetReference"
							},
							"name": "sourceexcelipe"
						},
						{
							"dataset": {
								"referenceName": "ds_leaves",
								"type": "DatasetReference"
							},
							"name": "sourceexcelleaves"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqldevplancore",
							"description": "[[dataexporter].[devplan_core]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlrpttranscript",
							"description": "[reporting].[vw_rpt_transcript] \n"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlrptusercf",
							"description": "[[reporting].[vw_rpt_user_cf]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlsurveyresponse",
							"description": "[dbo].[SurveyResponse]\n"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlhistoricalsnapshot",
							"description": "[[datatransformation].[HistoricalSnapshot]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcedbrptperformancereview"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlsuccessionincumbent",
							"description": "vw_rpt_succession_incumbent_smp_cf"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlviewccuser",
							"description": "[[reporting].[vw_users_cc]"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregateipe"
						},
						{
							"name": "aggregateabs"
						},
						{
							"name": "joinmain"
						},
						{
							"name": "joinmainevs"
						},
						{
							"name": "joinmain2abs"
						},
						{
							"name": "joinjoinmain3ipe"
						},
						{
							"name": "joinmain4leaves"
						},
						{
							"name": "joinmain5devplancore"
						},
						{
							"name": "joinmain6rpttranscript"
						},
						{
							"name": "joinmain7rptusercf"
						},
						{
							"name": "joinmain8surveyresponse"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          Respondents as string,",
						"          ResponseRate as string,",
						"          Culture as string,",
						"          {Culture  %Favorable} as string,",
						"          {Trust - Team} as string,",
						"          {Trust - Team  %Favorable} as string,",
						"          {Role Clarity Functional} as string,",
						"          {Role Clarity Functional  %Favorable} as string,",
						"          {Growth Functional} as string,",
						"          {Growth Functional  %Favorable} as string,",
						"          Career as string,",
						"          {Career  %Favorable} as string,",
						"          {Continuous Improvement Functional} as string,",
						"          {Continuous Improvement Functional  %Favorable} as string,",
						"          {Communication - Manager} as string,",
						"          {Communication - Manager  %Favorable} as string,",
						"          Support as string,",
						"          {Support  %Favorable} as string,",
						"          {Equal Opportunity} as string,",
						"          {Equal Opportunity  %Favorable} as string,",
						"          {Distress - Well-being} as string,",
						"          {Distress - Well-being  %Favorable} as string,",
						"          {Ethics Helpline} as string,",
						"          {Ethics Helpline  %Favorable} as string,",
						"          {Work Life Balance} as string,",
						"          {Work Life Balance  %Favorable} as string,",
						"          Growth as string,",
						"          {Growth  %Favorable} as string,",
						"          Cooperation as string,",
						"          {Cooperation  %Favorable} as string,",
						"          Initiative as string,",
						"          {Initiative  %Favorable} as string,",
						"          {Decision Making} as string,",
						"          {Decision Making  %Favorable} as string,",
						"          {Engagement Index} as string,",
						"          {Engagement Index  %Favorable} as string,",
						"          {Engagement Index > Recommend} as string,",
						"          {Engagement Index > Recommend  %Favorable} as string,",
						"          {Role Clarity} as string,",
						"          {Role Clarity  %Favorable} as string,",
						"          Resources as string,",
						"          {Resources  %Favorable} as string,",
						"          {Engagement Index > eSat} as string,",
						"          {Engagement Index > eSat  %Favorable} as string,",
						"          Belonging as string,",
						"          {Belonging  %Favorable} as string,",
						"          Prospects as string,",
						"          {Prospects  %Favorable} as string,",
						"          {Purpose Contribution} as string,",
						"          {Purpose Contribution  %Favorable} as string,",
						"          {Inclusion - Team} as string,",
						"          {Inclusion - Team  %Favorable} as string,",
						"          {Job Feedback} as string,",
						"          {Job Feedback  %Favorable} as string,",
						"          {Consumer Focus - Culture} as string,",
						"          {Consumer Focus - Culture  %Favorable} as string,",
						"          {Non-Discrimination} as string,",
						"          {Non-Discrimination  %Favorable} as string,",
						"          {Code of Conduct} as string,",
						"          {Code of Conduct  %Favorable} as string,",
						"          {Health & Safety} as string,",
						"          {Health & Safety  %Favorable} as string,",
						"          {Continuous Improvement} as string,",
						"          {Continuous Improvement  %Favorable} as string,",
						"          Empowerment as string,",
						"          {Empowerment  %Favorable} as string,",
						"          Environment as string,",
						"          {Environment  %Favorable} as string,",
						"          Purpose as string,",
						"          {Purpose  %Favorable} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceExcelevs",
						"source(output(",
						"          {User First Name} as string,",
						"          {User Last Name} as string,",
						"          {User ID} as string,",
						"          {Local system ID} as string,",
						"          Type as string,",
						"          Status as string,",
						"          {Date changed} as string,",
						"          {Date effective} as string,",
						"          {Field modified} as string,",
						"          {Field type} as string,",
						"          {Field changed from} as string,",
						"          {Field changed to} as string,",
						"          {Field changed by} as string,",
						"          {Reason for change} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceexcelabs",
						"source(output(",
						"          {User First Name} as string,",
						"          {User Last Name} as string,",
						"          {User ID} as string,",
						"          {Local system ID} as string,",
						"          Type as string,",
						"          Status as string,",
						"          {Date changed} as string,",
						"          {Date effective} as date 'dd/MM/yyyy',",
						"          {Field modified} as string,",
						"          {Field type} as string,",
						"          {Field changed from} as string,",
						"          {Field changed to} as string,",
						"          {Field changed by} as string,",
						"          {Reason for change} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceexcelipe",
						"source(output(",
						"          {User First Name} as string,",
						"          {User Last Name} as string,",
						"          {User ID} as string,",
						"          {Local system ID} as string,",
						"          Type as string,",
						"          Status as string,",
						"          {Date changed} as string,",
						"          {Date effective} as string,",
						"          {Field modified} as string,",
						"          {Field type} as string,",
						"          {Field changed from} as string,",
						"          {Field changed to} as string,",
						"          {Field changed by} as string,",
						"          {Reason for change} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceexcelleaves",
						"source(output(",
						"          count_devplan_id as integer,",
						"          assigned_user_id as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT count( distinct [devplan_id]) count_devplan_id,\\n      [assigned_user_id],year(devplan_created_dt) year\\n      FROM [dataexporter].[devplan_core] group by\\n  year(devplan_created_dt),[assigned_user_id]',",
						"     format: 'query') ~> sourcesqldevplancore",
						"source(output(",
						"          count_transc_obj_id as integer,",
						"          year as integer,",
						"          trans_user_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT count(distinct transc_object_id) count_transc_obj_id\\n      ,year([user_lo_create_dt]) year    \\n      ,[transc_user_id] trans_user_id     \\n  FROM [reporting].[vw_rpt_transcript] where year([user_lo_create_dt])>2018 \\n  group by year([user_lo_create_dt])    \\n      ,[transc_user_id] \\n',",
						"     format: 'query') ~> sourcesqlrpttranscript",
						"source(output(",
						"          user_cf_user_id as integer,",
						"          current_abs_compa_ratio as double,",
						"          current_ttc_compa_ratio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [user_cf_user_id]     \\n      ,[current_abs_compa_ratio]     \\n      ,[current_ttc_compa_ratio]     \\n  FROM [reporting].[vw_rpt_user_cf] where current_abs_compa_ratio is not null',",
						"     format: 'query') ~> sourcesqlrptusercf",
						"source(output(",
						"          RespondersEmail as string,",
						"          QuestionTitle as string,",
						"          Answer as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n      [RespondersEmail]      \\n      ,[QuestionTitle]     \\n      ,[Answer]\\n  FROM [dbo].[SurveyResponse] where CreatedBy like \\'%ee4%\\' and QuestionID=\\'4\\'',",
						"     format: 'query') ~> sourcesqlsurveyresponse",
						"source(output(",
						"          Id as long,",
						"          user_id as string,",
						"          user_email as string,",
						"          division as string,",
						"          job_family as string,",
						"          functional_area as string,",
						"          reason_for_leaving as string,",
						"          termination_type as string,",
						"          termination_date as timestamp,",
						"          original_hire_date as timestamp,",
						"          electrolux_legal_entity as string,",
						"          organizational_area as string,",
						"          region as string,",
						"          tier_level as integer,",
						"          job_level_sub_band as string,",
						"          job_level_band as string,",
						"          employee_nationality as string,",
						"          is_line_manager as string,",
						"          country_of_location as string,",
						"          employee_type as string,",
						"          date_of_birth as timestamp,",
						"          employee_gender as string,",
						"          job_family_id as integer,",
						"          job_family_ref as string,",
						"          manager_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nSELECT [Id]\\n      ,[user_id]\\n      ,[user_email]\\n      ,[division]\\n      ,[job_family]\\n      ,[functional_area]\\n      ,[reason_for_leaving]\\n      ,[termination_type]\\n      ,[termination_date]\\n      ,[original_hire_date]\\n      ,[electrolux_legal_entity]\\n      ,[organizational_area]\\n      ,[region]\\n      ,[tier_level]\\n      ,[job_level_sub_band]\\n      ,[job_level_band]\\n      ,[employee_nationality]\\n      ,[is_line_manager]\\n      ,[country_of_location]\\n      ,[employee_type]\\n      ,[date_of_birth]\\n      ,[employee_gender]\\n      ,[job_family_id]\\n      ,[job_family_ref]\\n      ,[manager_id]\\n  FROM [datatransformation].[HistoricalSnapshot]\\n',",
						"     format: 'query') ~> sourcesqlhistoricalsnapshot",
						"source(output(",
						"          user_id as integer,",
						"          year as string,",
						"          task_user_override as decimal(18,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [user_id]\\n      ,right([task_name],4) year\\n      ,[task_user_override]\\n        FROM [reporting].[vw_rpt_performance_review]',",
						"     format: 'query') ~> sourcedbrptperformancereview",
						"source(output(",
						"          user_id as integer,",
						"          task_id as integer,",
						"          rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [warehouse_smp_custom_fields_user_id] user_id\\n      ,[warehouse_smp_custom_fields_task_id] task_id\\n      ,RIGHT([smp_custom_field_02133],4) rating\\n  FROM [reporting].[vw_rpt_succession_incumbent_smp_cf]',",
						"     format: 'query') ~> sourcesqlsuccessionincumbent",
						"source(output(",
						"          {User ID Technical} as integer,",
						"          {User Id} as string,",
						"          {SAP ID} as string,",
						"          {User Full Name} as string,",
						"          {Original Hire Date} as string,",
						"          {Job Title} as string,",
						"          {Manager Ref} as string,",
						"          {Manager Full Name} as string,",
						"          Region as string,",
						"          {Country Of Payroll} as string,",
						"          {Country of Location} as string,",
						"          {User Status} as string,",
						"          {Employment Status} as string,",
						"          {Termination Date} as string,",
						"          {Functional Area} as string,",
						"          full_time_part_time as string,",
						"          work_time as double,",
						"          {Cost Centre} as string,",
						"          {Electrolux Legal Entity} as string,",
						"          {Individual IPE Ref} as string,",
						"          {Electrolux Legal Entity Ref} as string,",
						"          {Division ID} as integer,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from reporting.vw_users_cc',",
						"     format: 'query') ~> sourcesqlviewccuser",
						"sourceexcelipe aggregate(groupBy({User ID}),",
						"     {Date position changed} = max({Date effective})) ~> aggregateipe",
						"sourceexcelabs aggregate(groupBy({User ID}),",
						"     {Max Effective Date} = max({Date effective})) ~> aggregateabs",
						"sourcesqlhistoricalsnapshot, sourcesqlviewccuser join(user_id == {User Id},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain",
						"joinmain, sourceExcelevs join({Manager Ref} == upper(sourceExcelevs@ID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmainevs",
						"joinmainevs, aggregateabs join(user_id == aggregateabs@{User ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain2abs",
						"joinmain2abs, aggregateipe join(user_id == aggregateipe@{User ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinjoinmain3ipe",
						"joinjoinmain3ipe, sourceexcelleaves join(user_id == sourceexcelleaves@{User ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain4leaves",
						"joinmain4leaves, sourcesqldevplancore join({User ID Technical} == assigned_user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain5devplancore",
						"joinmain5devplancore, sourcesqlrpttranscript join({User ID Technical} == trans_user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain6rpttranscript",
						"joinmain6rpttranscript, sourcesqlrptusercf join({User ID Technical} == user_cf_user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain7rptusercf",
						"select1, sourcesqlsurveyresponse join(user_email == RespondersEmail,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain8surveyresponse",
						"joinmain7rptusercf select(mapColumn(",
						"          Id = sourcesqlhistoricalsnapshot@Id,",
						"          user_id,",
						"          user_email,",
						"          division = sourcesqlhistoricalsnapshot@division,",
						"          job_family,",
						"          functional_area,",
						"          reason_for_leaving,",
						"          termination_type,",
						"          termination_date,",
						"          original_hire_date,",
						"          electrolux_legal_entity,",
						"          organizational_area,",
						"          region = sourcesqlhistoricalsnapshot@region,",
						"          tier_level,",
						"          job_level_sub_band,",
						"          job_level_band,",
						"          employee_nationality,",
						"          is_line_manager,",
						"          country_of_location,",
						"          employee_type,",
						"          date_of_birth,",
						"          employee_gender,",
						"          job_family_id,",
						"          job_family_ref,",
						"          manager_id,",
						"          user_id_technical = {User ID Technical},",
						"          user_id = sourcesqlviewccuser@{User Id},",
						"          sap_id = {SAP ID},",
						"          user_full_name = {User Full Name},",
						"          original_hire_date = {Original Hire Date},",
						"          job_title = {Job Title},",
						"          manager_ref = {Manager Ref},",
						"          manager_full_name = {Manager Full Name},",
						"          region = sourcesqlviewccuser@Region,",
						"          country_of_payroll = {Country Of Payroll},",
						"          country_of_location = {Country of Location},",
						"          user_status = {User Status},",
						"          employment_status = {Employment Status},",
						"          termination_date = {Termination Date},",
						"          functional_area = {Functional Area},",
						"          full_time_part_time,",
						"          work_time,",
						"          {Cost Centre},",
						"          electrolux_legal_entity = {Electrolux Legal Entity},",
						"          individual_ipe_ref = {Individual IPE Ref},",
						"          electrolux_legal_entity_ref = {Electrolux Legal Entity Ref},",
						"          division_id = {Division ID},",
						"          division = sourcesqlviewccuser@Division,",
						"          evsid = sourceExcelevs@ID,",
						"          respondents = Respondents,",
						"          response_rate = ResponseRate,",
						"          culture = Culture,",
						"          culture_favorable = {Culture  %Favorable},",
						"          trust_team = {Trust - Team},",
						"          trust_team_favorable = {Trust - Team  %Favorable},",
						"          role_clarity_functional = {Role Clarity Functional},",
						"          role_clarity_functional_favorable = {Role Clarity Functional  %Favorable},",
						"          growth_functional = {Growth Functional},",
						"          growth_functional_favorable = {Growth Functional  %Favorable},",
						"          career = Career,",
						"          career_favorable = {Career  %Favorable},",
						"          continuous_Improvement_functional = {Continuous Improvement Functional},",
						"          continuous_Improvement_functional_favorable = {Continuous Improvement Functional  %Favorable},",
						"          communication_manager = {Communication - Manager},",
						"          communication_manager_favorable = {Communication - Manager  %Favorable},",
						"          support = Support,",
						"          support_favorable = {Support  %Favorable},",
						"          equal_opportunity = {Equal Opportunity},",
						"          equal_opportunity_favorable = {Equal Opportunity  %Favorable},",
						"          distress_well_being = {Distress - Well-being},",
						"          distress_well_being_favorable = {Distress - Well-being  %Favorable},",
						"          ethics_helpline = {Ethics Helpline},",
						"          ethics_helpline_favorable = {Ethics Helpline  %Favorable},",
						"          work_life_balance = {Work Life Balance},",
						"          work_life_balance_favorable = {Work Life Balance  %Favorable},",
						"          growth = Growth,",
						"          growth_favorable = {Growth  %Favorable},",
						"          cooperation = Cooperation,",
						"          cooperation_favorable = {Cooperation  %Favorable},",
						"          initiative = Initiative,",
						"          initiative_favorable = {Initiative  %Favorable},",
						"          decision_making = {Decision Making},",
						"          decision_making_favorable = {Decision Making  %Favorable},",
						"          engagement_index = {Engagement Index},",
						"          engagement_index_favorable = {Engagement Index  %Favorable},",
						"          engagement_index_recommend = {Engagement Index > Recommend},",
						"          engagement_index_recommend_favorable = {Engagement Index > Recommend  %Favorable},",
						"          role_clarity = {Role Clarity},",
						"          role_clarity_favorable = {Role Clarity  %Favorable},",
						"          resources = Resources,",
						"          resources_favorable = {Resources  %Favorable},",
						"          engagement_index_esat = {Engagement Index > eSat},",
						"          engagement_index_esat_favorable = {Engagement Index > eSat  %Favorable},",
						"          belonging = Belonging,",
						"          belonging_favorable = {Belonging  %Favorable},",
						"          prospects = Prospects,",
						"          prospects_favorable = {Prospects  %Favorable},",
						"          purpose_contribution = {Purpose Contribution},",
						"          purpose_contribution_favorable = {Purpose Contribution  %Favorable},",
						"          Inclusion_team = {Inclusion - Team},",
						"          Inclusion_team_favorable = {Inclusion - Team  %Favorable},",
						"          job_feedback = {Job Feedback},",
						"          job_feedback_favorable = {Job Feedback  %Favorable},",
						"          consumer_focus_culture = {Consumer Focus - Culture},",
						"          consumer_focus_culture_favorable = {Consumer Focus - Culture  %Favorable},",
						"          non_discrimination = {Non-Discrimination},",
						"          non_discrimination_favorable = {Non-Discrimination  %Favorable},",
						"          code_of_conduct = {Code of Conduct},",
						"          code_of_conduct_favorable = {Code of Conduct  %Favorable},",
						"          health_safety = {Health & Safety},",
						"          health_safety_favorable = {Health & Safety  %Favorable},",
						"          continuous_improvement = {Continuous Improvement},",
						"          continuous_improvement_favorable = {Continuous Improvement  %Favorable},",
						"          empowerment = Empowerment,",
						"          empowerment_favorable = {Empowerment  %Favorable},",
						"          environment = Environment,",
						"          environment_favorable = {Environment  %Favorable},",
						"          purpose = Purpose,",
						"          purpose_favorable = {Purpose  %Favorable},",
						"          user_id = aggregateabs@{User ID},",
						"          abs_max_effective_date = {Max Effective Date},",
						"          ipe_user_id = aggregateipe@{User ID},",
						"          ipe_date_position_changed = {Date position changed},",
						"          user_first_name = {User First Name},",
						"          user_last_name = {User Last Name},",
						"          user_id = sourceexcelleaves@{User ID},",
						"          local_system_id = {Local system ID},",
						"          type = Type,",
						"          status = Status,",
						"          date_changed = {Date changed},",
						"          date_effective = {Date effective},",
						"          field_modified = {Field modified},",
						"          field_type = {Field type},",
						"          field_changed_from = {Field changed from},",
						"          field_changed_to = {Field changed to},",
						"          field_changed_by = {Field changed by},",
						"          reason_for_change = {Reason for change},",
						"          count_devplan_id,",
						"          assigned_user_id,",
						"          year = sourcesqldevplancore@year,",
						"          count_transc_obj_id,",
						"          year = sourcesqlrpttranscript@year,",
						"          trans_user_id,",
						"          user_cf_user_id,",
						"          current_abs_compa_ratio,",
						"          current_ttc_compa_ratio",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"joinmain8surveyresponse sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['predpresc.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Id,",
						"          user_id,",
						"          user_email,",
						"          division,",
						"          job_family,",
						"          functional_area,",
						"          reason_for_leaving,",
						"          termination_type,",
						"          termination_date,",
						"          original_hire_date,",
						"          electrolux_legal_entity,",
						"          organizational_area,",
						"          region,",
						"          tier_level,",
						"          job_level_sub_band,",
						"          job_level_band,",
						"          employee_nationality,",
						"          is_line_manager,",
						"          country_of_location,",
						"          employee_type,",
						"          date_of_birth,",
						"          employee_gender,",
						"          job_family_id,",
						"          job_family_ref,",
						"          manager_id,",
						"          user_id_technical,",
						"          sap_id,",
						"          user_full_name,",
						"          job_title,",
						"          manager_ref,",
						"          manager_full_name,",
						"          country_of_payroll,",
						"          user_status,",
						"          employment_status,",
						"          full_time_part_time,",
						"          work_time,",
						"          cost_centre = {Cost Centre},",
						"          individual_ipe_ref,",
						"          electrolux_legal_entity_ref,",
						"          division_id,",
						"          evsid,",
						"          respondents,",
						"          response_rate,",
						"          culture,",
						"          culture_favorable,",
						"          trust_team,",
						"          trust_team_favorable,",
						"          role_clarity_functional,",
						"          role_clarity_functional_favorable,",
						"          growth_functional,",
						"          growth_functional_favorable,",
						"          career,",
						"          career_favorable,",
						"          continuous_Improvement_functional,",
						"          continuous_Improvement_functional_favorable,",
						"          communication_manager,",
						"          communication_manager_favorable,",
						"          support,",
						"          support_favorable,",
						"          equal_opportunity,",
						"          equal_opportunity_favorable,",
						"          distress_well_being,",
						"          distress_well_being_favorable,",
						"          ethics_helpline,",
						"          ethics_helpline_favorable,",
						"          work_life_balance,",
						"          work_life_balance_favorable,",
						"          growth,",
						"          growth_favorable,",
						"          cooperation,",
						"          cooperation_favorable,",
						"          initiative,",
						"          initiative_favorable,",
						"          decision_making,",
						"          decision_making_favorable,",
						"          engagement_index,",
						"          engagement_index_favorable,",
						"          engagement_index_recommend,",
						"          engagement_index_recommend_favorable,",
						"          role_clarity,",
						"          role_clarity_favorable,",
						"          resources,",
						"          resources_favorable,",
						"          engagement_index_esat,",
						"          engagement_index_esat_favorable,",
						"          belonging,",
						"          belonging_favorable,",
						"          prospects,",
						"          prospects_favorable,",
						"          purpose_contribution,",
						"          purpose_contribution_favorable,",
						"          Inclusion_team,",
						"          Inclusion_team_favorable,",
						"          job_feedback,",
						"          job_feedback_favorable,",
						"          consumer_focus_culture,",
						"          consumer_focus_culture_favorable,",
						"          non_discrimination,",
						"          non_discrimination_favorable,",
						"          code_of_conduct,",
						"          code_of_conduct_favorable,",
						"          health_safety,",
						"          health_safety_favorable,",
						"          continuous_improvement,",
						"          continuous_improvement_favorable,",
						"          empowerment,",
						"          empowerment_favorable,",
						"          environment,",
						"          environment_favorable,",
						"          purpose,",
						"          purpose_favorable,",
						"          abs_max_effective_date,",
						"          ipe_user_id,",
						"          ipe_date_position_changed,",
						"          user_first_name,",
						"          user_last_name,",
						"          local_system_id,",
						"          type,",
						"          status,",
						"          date_changed,",
						"          date_effective,",
						"          field_modified,",
						"          field_type,",
						"          field_changed_from,",
						"          field_changed_to,",
						"          field_changed_by,",
						"          reason_for_change,",
						"          count_devplan_id,",
						"          assigned_user_id,",
						"          year,",
						"          count_transc_obj_id,",
						"          trans_user_id,",
						"          user_cf_user_id,",
						"          current_abs_compa_ratio,",
						"          current_ttc_compa_ratio,",
						"          RespondersEmail,",
						"          QuestionTitle,",
						"          Answer",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_evs')]",
				"[concat(variables('factoryId'), '/datasets/ds_abs')]",
				"[concat(variables('factoryId'), '/datasets/ds_ipe')]",
				"[concat(variables('factoryId'), '/datasets/ds_leaves')]",
				"[concat(variables('factoryId'), '/datasets/ds_azure_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_presc_presc_splitted')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlhistoricalsnapshot",
							"description": "[[datatransformation].[HistoricalSnapshot]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlviewccuser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_delta_predandpresc",
								"type": "DatasetReference"
							},
							"name": "sinktodatalake"
						}
					],
					"transformations": [
						{
							"name": "joinmain"
						},
						{
							"name": "selectviewccuser"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as long,",
						"          user_id as string,",
						"          user_email as string,",
						"          division as string,",
						"          job_family as string,",
						"          functional_area as string,",
						"          reason_for_leaving as string,",
						"          termination_type as string,",
						"          termination_date as timestamp,",
						"          original_hire_date as timestamp,",
						"          electrolux_legal_entity as string,",
						"          organizational_area as string,",
						"          region as string,",
						"          tier_level as integer,",
						"          job_level_sub_band as string,",
						"          job_level_band as string,",
						"          employee_nationality as string,",
						"          is_line_manager as string,",
						"          country_of_location as string,",
						"          employee_type as string,",
						"          date_of_birth as timestamp,",
						"          employee_gender as string,",
						"          job_family_id as integer,",
						"          job_family_ref as string,",
						"          manager_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nSELECT [Id]\\n      ,[user_id]\\n      ,[user_email]\\n      ,[division]\\n      ,[job_family]\\n      ,[functional_area]\\n      ,[reason_for_leaving]\\n      ,[termination_type]\\n      ,[termination_date]\\n      ,[original_hire_date]\\n      ,[electrolux_legal_entity]\\n      ,[organizational_area]\\n      ,[region]\\n      ,[tier_level]\\n      ,[job_level_sub_band]\\n      ,[job_level_band]\\n      ,[employee_nationality]\\n      ,[is_line_manager]\\n      ,[country_of_location]\\n      ,[employee_type]\\n      ,[date_of_birth]\\n      ,[employee_gender]\\n      ,[job_family_id]\\n      ,[job_family_ref]\\n      ,[manager_id]\\n  FROM [datatransformation].[HistoricalSnapshot]\\n',",
						"     format: 'query') ~> sourcesqlhistoricalsnapshot",
						"source(output(",
						"          {User ID Technical} as integer,",
						"          {User Id} as string,",
						"          {SAP ID} as string,",
						"          {User Full Name} as string,",
						"          {Original Hire Date} as string,",
						"          {Job Title} as string,",
						"          {Manager Ref} as string,",
						"          {Manager Full Name} as string,",
						"          Region as string,",
						"          {Country Of Payroll} as string,",
						"          {Country of Location} as string,",
						"          {User Status} as string,",
						"          {Employment Status} as string,",
						"          {Termination Date} as string,",
						"          {Functional Area} as string,",
						"          {Full time/Part time} as string,",
						"          {Work Time / Capacity %} as double,",
						"          {Cost Centre} as string,",
						"          {Electrolux Legal Entity} as string,",
						"          {Individual IPE Ref} as string,",
						"          {Electrolux Legal Entity Ref} as string,",
						"          {Division ID} as integer,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from reporting.vw_users_cc',",
						"     format: 'query') ~> sourcesqlviewccuser",
						"sourcesqlhistoricalsnapshot, selectviewccuser join(sourcesqlhistoricalsnapshot@user_id == selectviewccuser@user_Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain",
						"sourcesqlviewccuser select(mapColumn(",
						"          user_id_technical = {User ID Technical},",
						"          user_Id = {User Id},",
						"          sap_id = {SAP ID},",
						"          user_full_name = {User Full Name},",
						"          original_hire_date = {Original Hire Date},",
						"          job_title = {Job Title},",
						"          manager_ref = {Manager Ref},",
						"          manager_full_name = {Manager Full Name},",
						"          region = Region,",
						"          country_of_payroll = {Country Of Payroll},",
						"          country_of_location = {Country of Location},",
						"          user_status = {User Status},",
						"          employment_status = {Employment Status},",
						"          termination_date = {Termination Date},",
						"          functional_area = {Functional Area},",
						"          full_time_part_time = {Full time/Part time},",
						"          work_time_capacity_per = {Work Time / Capacity %},",
						"          cost_centre = {Cost Centre},",
						"          electrolux_legal_entity = {Electrolux Legal Entity},",
						"          individual_ipe_ref = {Individual IPE Ref},",
						"          electrolux_legal_entity_ref = {Electrolux Legal Entity Ref},",
						"          division_id = {Division ID},",
						"          division = Division",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectviewccuser",
						"joinmain select(mapColumn(",
						"          Id,",
						"          user_id = sourcesqlhistoricalsnapshot@user_id,",
						"          user_email,",
						"          division = sourcesqlhistoricalsnapshot@division,",
						"          job_family,",
						"          functional_area = sourcesqlhistoricalsnapshot@functional_area,",
						"          reason_for_leaving,",
						"          termination_type,",
						"          termination_date = sourcesqlhistoricalsnapshot@termination_date,",
						"          original_hire_date = sourcesqlhistoricalsnapshot@original_hire_date,",
						"          electrolux_legal_entity = sourcesqlhistoricalsnapshot@electrolux_legal_entity,",
						"          organizational_area,",
						"          region = sourcesqlhistoricalsnapshot@region,",
						"          tier_level,",
						"          job_level_sub_band,",
						"          job_level_band,",
						"          employee_nationality,",
						"          is_line_manager,",
						"          country_of_location = sourcesqlhistoricalsnapshot@country_of_location,",
						"          employee_type,",
						"          date_of_birth,",
						"          employee_gender,",
						"          job_family_id,",
						"          job_family_ref,",
						"          manager_id,",
						"          user_id_technical,",
						"          sap_id,",
						"          user_full_name,",
						"          original_hire_date = selectviewccuser@original_hire_date,",
						"          job_title,",
						"          manager_ref,",
						"          manager_full_name,",
						"          region = selectviewccuser@region,",
						"          country_of_payroll,",
						"          country_of_location = selectviewccuser@country_of_location,",
						"          user_status,",
						"          employment_status,",
						"          termination_date = selectviewccuser@termination_date,",
						"          functional_area = selectviewccuser@functional_area,",
						"          full_time_part_time,",
						"          work_time_capacity_per,",
						"          cost_centre,",
						"          electrolux_legal_entity = selectviewccuser@electrolux_legal_entity,",
						"          individual_ipe_ref,",
						"          electrolux_legal_entity_ref,",
						"          division_id,",
						"          division = selectviewccuser@division",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          respondents as integer,",
						"          responserate as integer,",
						"          culture as integer,",
						"          culture_per_favorable as integer,",
						"          trust_team as integer,",
						"          trust_team_per_favorable as integer,",
						"          role_clarity_functional as string,",
						"          role_clarity_functional_per_favorable as string,",
						"          growth_functional as string,",
						"          growth_functional_per_favorable as string,",
						"          career as integer,",
						"          career_per_favorable as integer,",
						"          continuous_improvement_functional as string,",
						"          continuous_improvement_functional_per_favorable as string,",
						"          communication_manager as integer,",
						"          communication_manager_per_favorable as integer,",
						"          support as integer,",
						"          support_per_favorable as integer,",
						"          equal_opportunity as integer,",
						"          equal_opportunity_per_favorable as integer,",
						"          {distress_well-being} as integer,",
						"          {distress_well-being_per_favorable} as integer,",
						"          ethics_helpline as integer,",
						"          ethics_helpline_per_favorable as integer,",
						"          work_life_balance as integer,",
						"          work_life_balance_per_favorable as integer,",
						"          growth as integer,",
						"          growth_per_favorable as integer,",
						"          cooperation as integer,",
						"          cooperation_per_favorable as integer,",
						"          initiative as integer,",
						"          initiative_per_favorable as integer,",
						"          decision_making as integer,",
						"          decision_making_per_favorable as integer,",
						"          engagement_index as integer,",
						"          engagement_index_per_favorable as integer,",
						"          {engagement_index_>_recommend} as integer,",
						"          {engagement_index_>_recommend_per_favorable} as integer,",
						"          role_clarity as integer,",
						"          role_clarity_per_favorable as integer,",
						"          resources as integer,",
						"          resources_per_favorable as integer,",
						"          {engagement_index_>_esat} as integer,",
						"          {engagement_index_>_esat_per_favorable} as integer,",
						"          belonging as integer,",
						"          belonging_per_favorable as integer,",
						"          prospects as integer,",
						"          prospects_per_favorable as integer,",
						"          purpose_contribution as integer,",
						"          purpose_contribution_per_favorable as integer,",
						"          inclusion_team as integer,",
						"          inclusion_team_per_favorable as integer,",
						"          job_feedback as integer,",
						"          job_feedback_per_favorable as integer,",
						"          consumer_focus_culture as integer,",
						"          consumer_focus_culture_per_favorable as integer,",
						"          {non-discrimination} as integer,",
						"          {non-discrimination_per_favorable} as integer,",
						"          code_of_conduct as integer,",
						"          code_of_conduct_per_favorable as integer,",
						"          {health_&_safety} as integer,",
						"          {health_&_safety_per_favorable} as integer,",
						"          continuous_improvement as integer,",
						"          continuous_improvement_per_favorable as integer,",
						"          empowerment as integer,",
						"          empowerment_per_favorable as integer,",
						"          environment as integer,",
						"          environment_per_favorable as integer,",
						"          purpose as integer,",
						"          purpose_per_favorable as integer",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinktodatalake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_delta_predandpresc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_users_cc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "vwuserscc",
							"description": "[[reporting].[vw_users_cc]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "vwuserhierarchy",
							"description": "[[reporting].[vw_user_hierarchy_cc]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "vwdivisionhierarchy",
							"description": "[[reporting].[vw_division_hierarchy_cc]"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_elxa2ns0002prd_dev",
								"type": "DatasetReference"
							},
							"name": "sinktocsv"
						}
					],
					"transformations": [
						{
							"name": "joinusershierarchy"
						},
						{
							"name": "joinusersdivision"
						},
						{
							"name": "selectneededfields"
						},
						{
							"name": "filterregion"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {User ID Technical} as integer,",
						"          {User Id} as string,",
						"          {SAP ID} as string,",
						"          {User Full Name} as string,",
						"          {Original Hire Date} as date,",
						"          {Job Title} as string,",
						"          {Manager Full Name} as string,",
						"          Region as string,",
						"          {Country Of Payroll} as string,",
						"          {Country of Location} as string,",
						"          {User Status} as string,",
						"          {Employment Status} as string,",
						"          {Termination Date} as date,",
						"          {Functional Area} as string,",
						"          {Full time/Part time} as string,",
						"          {Work Time / Capacity %} as double,",
						"          {Cost Centre} as string,",
						"          {Electrolux Legal Entity} as string,",
						"          {Individual IPE Ref} as string,",
						"          {Electrolux Legal Entity Ref} as string,",
						"          {Division ID} as integer,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT  [User ID Technical]\\n      ,[User Id]\\n      ,[SAP ID]\\n      ,[User Full Name]\\n      ,[Original Hire Date]\\n      ,[Job Title]\\n      ,[Manager Full Name]\\n      ,[Region]\\n      ,[Country Of Payroll]\\n      ,[Country of Location]\\n      ,[User Status]\\n      ,[Employment Status]\\n      ,[Termination Date]\\n      ,[Functional Area]\\n      ,[Full time/Part time]\\n      ,[Work Time / Capacity %]\\n      ,[Cost Centre]\\n      ,[Electrolux Legal Entity]\\n      ,[Individual IPE Ref]\\n      ,[Electrolux Legal Entity Ref]\\n      ,[Division ID]\\n      ,[Division]\\n  FROM [reporting].[vw_users_cc]',",
						"     format: 'query') ~> vwuserscc",
						"source(output(",
						"          {User ID Technical} as integer,",
						"          Name_Path as string,",
						"          {User Name1} as string,",
						"          {User Name2} as string,",
						"          {User Name3} as string,",
						"          {User Name4} as string,",
						"          {User Name5} as string,",
						"          {User Name6} as string,",
						"          {User Name7} as string,",
						"          {User Name8} as string,",
						"          {User Name9} as string,",
						"          {User Name10} as string,",
						"          {User Name11} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [User ID Technical]\\n      ,[Name_Path]\\n      ,[User Name1]\\n      ,[User Name2]\\n      ,[User Name3]\\n      ,[User Name4]\\n      ,[User Name5]\\n      ,[User Name6]\\n      ,[User Name7]\\n      ,[User Name8]\\n      ,[User Name9]\\n      ,[User Name10]\\n      ,[User Name11]\\n  FROM [reporting].[vw_user_hierarchy_cc]',",
						"     format: 'query') ~> vwuserhierarchy",
						"source(output(",
						"          {Division ID} as integer,",
						"          {Division Name} as string,",
						"          {Division Name1} as string,",
						"          {Division Name2} as string,",
						"          {Division Name3} as string,",
						"          {Division Name4} as string,",
						"          {Division Name5} as string,",
						"          {Division Name6} as string,",
						"          {Division Name7} as string,",
						"          {Division Name8} as string,",
						"          {Division Name9} as string,",
						"          {Division Name10} as string,",
						"          {Division Name11} as string,",
						"          {Division Name12} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [Division ID]\\n      ,[Division Name]\\n      ,[Division Name1]\\n      ,[Division Name2]\\n      ,[Division Name3]\\n      ,[Division Name4]\\n      ,[Division Name5]\\n      ,[Division Name6]\\n      ,[Division Name7]\\n      ,[Division Name8]\\n      ,[Division Name9]\\n      ,[Division Name10]\\n      ,[Division Name11]\\n      ,[Division Name12]\\n  FROM [reporting].[vw_division_hierarchy_cc]',",
						"     format: 'query') ~> vwdivisionhierarchy",
						"filterregion, vwuserhierarchy join(vwuserscc@{User ID Technical} == vwuserhierarchy@{User ID Technical},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinusershierarchy",
						"joinusershierarchy, vwdivisionhierarchy join(vwuserscc@{Division ID} == vwdivisionhierarchy@{Division ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinusersdivision",
						"derivedColumn1 select(mapColumn(",
						"          user_Id = {User Id},",
						"          sap_id = {SAP ID},",
						"          user_full_name = {User Full Name},",
						"          original_hire_date = {Original Hire Date},",
						"          job_title = {Job Title},",
						"          manager_full_name = {Manager Full Name},",
						"          region = Region,",
						"          country_of_payroll = {Country Of Payroll},",
						"          country_of_location = {Country of Location},",
						"          user_status = {User Status},",
						"          employment_status = {Employment Status},",
						"          termination_date = {Termination Date},",
						"          functional_area = {Functional Area},",
						"          full_time_part_time = {Full time/Part time},",
						"          work_time_capacity = {Work Time / Capacity %},",
						"          cost_centre = {Cost Centre},",
						"          electrolux_legal_entity = {Electrolux Legal Entity},",
						"          electrolux_legal_entity_ref = {Electrolux Legal Entity Ref},",
						"          division = Division,",
						"          user_name1 = {User Name1},",
						"          user_name2 = {User Name2},",
						"          user_name3 = {User Name3},",
						"          user_name4 = {User Name4},",
						"          user_name5 = {User Name5},",
						"          user_name6 = {User Name6},",
						"          user_name7 = {User Name7},",
						"          user_name8 = {User Name8},",
						"          user_name9 = {User Name9},",
						"          user_name10 = {User Name10},",
						"          user_name11 = {User Name11},",
						"          division_name1 = {Division Name1},",
						"          division_name2 = {Division Name2},",
						"          division_name3 = {Division Name3},",
						"          division_name4 = {Division Name4},",
						"          division_name5 = {Division Name5},",
						"          division_name6 = {Division Name6},",
						"          division_name7 = {Division Name7},",
						"          division_name8 = {Division Name8},",
						"          division_name9 = {Division Name9},",
						"          division_name10 = {Division Name10},",
						"          division_name11 = {Division Name11},",
						"          division_name12 = {Division Name12},",
						"          date_of_generation = {Data of Generation}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectneededfields",
						"vwuserscc filter(Region=='North America') ~> filterregion",
						"joinusersdivision derive({Data of Generation} = toString(currentDate())) ~> derivedColumn1",
						"selectneededfields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat('emp_headcount_sga_',substring(toString(currentUTC()),1,4),substring(toString(currentUTC()),6,2),'.csv')\r",
						"\r",
						")],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          user_Id,",
						"          sap_id,",
						"          user_full_name,",
						"          original_hire_date,",
						"          job_title,",
						"          manager_full_name,",
						"          region,",
						"          country_of_payroll,",
						"          country_of_location,",
						"          user_status,",
						"          employment_status,",
						"          termination_date,",
						"          functional_area,",
						"          full_time_part_time,",
						"          work_time_capacity,",
						"          cost_centre,",
						"          electrolux_legal_entity,",
						"          electrolux_legal_entity_ref,",
						"          division,",
						"          user_name1,",
						"          user_name2,",
						"          user_name3,",
						"          user_name4,",
						"          user_name5,",
						"          user_name6,",
						"          user_name7,",
						"          user_name8,",
						"          user_name9,",
						"          user_name10,",
						"          user_name11,",
						"          division_name1,",
						"          division_name2,",
						"          division_name3,",
						"          division_name4,",
						"          division_name5,",
						"          division_name6,",
						"          division_name7,",
						"          division_name8,",
						"          division_name9,",
						"          division_name10,",
						"          division_name11,",
						"          division_name12,",
						"          date_of_generation",
						"     ),",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sinktocsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_elxa2ns0002prd_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pred_presc_01_sql')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqldevplancore",
							"description": "[[dataexporter].[devplan_core]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlrpttranscript",
							"description": "[reporting].[vw_rpt_transcript] \n"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlrptusercf",
							"description": "[[reporting].[vw_rpt_user_cf]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlsurveyresponse",
							"description": "[dbo].[SurveyResponse]\n"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlhistoricalsnapshot",
							"description": "[[datatransformation].[HistoricalSnapshot]"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcedbrptperformancereview"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlsuccessionincumbent",
							"description": "vw_rpt_succession_incumbent_smp_cf"
						},
						{
							"dataset": {
								"referenceName": "ds_azure_table",
								"type": "DatasetReference"
							},
							"name": "sourcesqlviewccuser",
							"description": "[[reporting].[vw_users_cc]"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_delta_predandpresc",
								"type": "DatasetReference"
							},
							"name": "sinktodatalake"
						}
					],
					"transformations": [
						{
							"name": "joinmain"
						},
						{
							"name": "joinsql2"
						},
						{
							"name": "joinsql3"
						},
						{
							"name": "joinsql4"
						},
						{
							"name": "joinsql5"
						},
						{
							"name": "selectfield"
						}
					],
					"scriptLines": [
						"source(output(",
						"          count_devplan_id as integer,",
						"          assigned_user_id as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT count( distinct [devplan_id]) count_devplan_id,\\n      [assigned_user_id],year(devplan_created_dt) year\\n      FROM [dataexporter].[devplan_core] group by\\n  year(devplan_created_dt),[assigned_user_id]',",
						"     format: 'query') ~> sourcesqldevplancore",
						"source(output(",
						"          count_transc_obj_id as integer,",
						"          year as integer,",
						"          trans_user_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT count(distinct transc_object_id) count_transc_obj_id\\n      ,year([user_lo_create_dt]) year    \\n      ,[transc_user_id] trans_user_id     \\n  FROM [reporting].[vw_rpt_transcript] where year([user_lo_create_dt])>2018 \\n  group by year([user_lo_create_dt])    \\n      ,[transc_user_id] \\n',",
						"     format: 'query') ~> sourcesqlrpttranscript",
						"source(output(",
						"          user_cf_user_id as integer,",
						"          current_abs_compa_ratio as double,",
						"          current_ttc_compa_ratio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [user_cf_user_id]     \\n      ,[current_abs_compa_ratio]     \\n      ,[current_ttc_compa_ratio]     \\n  FROM [reporting].[vw_rpt_user_cf] where current_abs_compa_ratio is not null',",
						"     format: 'query') ~> sourcesqlrptusercf",
						"source(output(",
						"          RespondersEmail as string,",
						"          QuestionTitle as string,",
						"          Answer as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n      [RespondersEmail]      \\n      ,[QuestionTitle]     \\n      ,[Answer]\\n  FROM [dbo].[SurveyResponse] where CreatedBy like \\'%ee4%\\' and QuestionID=\\'4\\'',",
						"     format: 'query') ~> sourcesqlsurveyresponse",
						"source(output(",
						"          Id as long,",
						"          user_id as string,",
						"          user_email as string,",
						"          division as string,",
						"          job_family as string,",
						"          functional_area as string,",
						"          reason_for_leaving as string,",
						"          termination_type as string,",
						"          termination_date as timestamp,",
						"          original_hire_date as timestamp,",
						"          electrolux_legal_entity as string,",
						"          organizational_area as string,",
						"          region as string,",
						"          tier_level as integer,",
						"          job_level_sub_band as string,",
						"          job_level_band as string,",
						"          employee_nationality as string,",
						"          is_line_manager as string,",
						"          country_of_location as string,",
						"          employee_type as string,",
						"          date_of_birth as timestamp,",
						"          employee_gender as string,",
						"          job_family_id as integer,",
						"          job_family_ref as string,",
						"          manager_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nSELECT [Id]\\n      ,[user_id]\\n      ,[user_email]\\n      ,[division]\\n      ,[job_family]\\n      ,[functional_area]\\n      ,[reason_for_leaving]\\n      ,[termination_type]\\n      ,[termination_date]\\n      ,[original_hire_date]\\n      ,[electrolux_legal_entity]\\n      ,[organizational_area]\\n      ,[region]\\n      ,[tier_level]\\n      ,[job_level_sub_band]\\n      ,[job_level_band]\\n      ,[employee_nationality]\\n      ,[is_line_manager]\\n      ,[country_of_location]\\n      ,[employee_type]\\n      ,[date_of_birth]\\n      ,[employee_gender]\\n      ,[job_family_id]\\n      ,[job_family_ref]\\n      ,[manager_id]\\n  FROM [datatransformation].[HistoricalSnapshot]\\n',",
						"     format: 'query') ~> sourcesqlhistoricalsnapshot",
						"source(output(",
						"          user_id as integer,",
						"          year as string,",
						"          task_user_override as decimal(18,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [user_id]\\n      ,right([task_name],4) year\\n      ,[task_user_override]\\n        FROM [reporting].[vw_rpt_performance_review]',",
						"     format: 'query') ~> sourcedbrptperformancereview",
						"source(output(",
						"          user_id as integer,",
						"          task_id as integer,",
						"          rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [warehouse_smp_custom_fields_user_id] user_id\\n      ,[warehouse_smp_custom_fields_task_id] task_id\\n      ,RIGHT([smp_custom_field_02133],4) rating\\n  FROM [reporting].[vw_rpt_succession_incumbent_smp_cf]',",
						"     format: 'query') ~> sourcesqlsuccessionincumbent",
						"source(output(",
						"          {User ID Technical} as integer,",
						"          {User Id} as string,",
						"          {SAP ID} as string,",
						"          {User Full Name} as string,",
						"          {Original Hire Date} as string,",
						"          {Job Title} as string,",
						"          {Manager Ref} as string,",
						"          {Manager Full Name} as string,",
						"          Region as string,",
						"          {Country Of Payroll} as string,",
						"          {Country of Location} as string,",
						"          {User Status} as string,",
						"          {Employment Status} as string,",
						"          {Termination Date} as string,",
						"          {Functional Area} as string,",
						"          full_time_part_time as string,",
						"          work_time as double,",
						"          {Cost Centre} as string,",
						"          {Electrolux Legal Entity} as string,",
						"          {Individual IPE Ref} as string,",
						"          {Electrolux Legal Entity Ref} as string,",
						"          {Division ID} as integer,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from reporting.vw_users_cc',",
						"     format: 'query') ~> sourcesqlviewccuser",
						"sourcesqlhistoricalsnapshot, sourcesqlviewccuser join(user_id == {User Id},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmain",
						"joinmain, sourcesqldevplancore join({User ID Technical} == assigned_user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinsql2",
						"joinsql2, sourcesqlrpttranscript join({User ID Technical} == trans_user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinsql3",
						"joinsql3, sourcesqlrptusercf join({User ID Technical} == user_cf_user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinsql4",
						"joinsql4, sourcesqlsurveyresponse join(user_email == RespondersEmail,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinsql5",
						"joinsql5 select(mapColumn(",
						"          Id,",
						"          user_id,",
						"          user_email,",
						"          division = sourcesqlhistoricalsnapshot@division,",
						"          job_family,",
						"          functional_area,",
						"          reason_for_leaving,",
						"          termination_type,",
						"          termination_date,",
						"          original_hire_date,",
						"          electrolux_legal_entity,",
						"          organizational_area,",
						"          region = sourcesqlhistoricalsnapshot@region,",
						"          tier_level,",
						"          job_level_sub_band,",
						"          job_level_band,",
						"          employee_nationality,",
						"          is_line_manager,",
						"          country_of_location,",
						"          employee_type,",
						"          date_of_birth,",
						"          employee_gender,",
						"          job_family_id,",
						"          job_family_ref,",
						"          manager_id,",
						"          user_id_technical = {User ID Technical},",
						"          sap_id = {SAP ID},",
						"          user_full_name = {User Full Name},",
						"          original_hire_date = {Original Hire Date},",
						"          job_title = {Job Title},",
						"          manager_ref = {Manager Ref},",
						"          manager_full_name = {Manager Full Name},",
						"          region = sourcesqlviewccuser@Region,",
						"          country_of_payroll = {Country Of Payroll},",
						"          country_of_location = {Country of Location},",
						"          user_status = {User Status},",
						"          employment_status = {Employment Status},",
						"          termination_date = {Termination Date},",
						"          functional_area = {Functional Area},",
						"          full_time_part_time,",
						"          work_time,",
						"          cost_centre = {Cost Centre},",
						"          electrolux_legal_entity = {Electrolux Legal Entity},",
						"          individual_ipe_ref = {Individual IPE Ref},",
						"          electrolux_legal_entity_ref = {Electrolux Legal Entity Ref},",
						"          division_id = {Division ID},",
						"          division = sourcesqlviewccuser@Division,",
						"          count_devplan_id,",
						"          assigned_user_id,",
						"          devplancore_year = sourcesqldevplancore@year,",
						"          count_transc_obj_id,",
						"          rpt_transcript_year = sourcesqlrpttranscript@year,",
						"          trans_user_id,",
						"          user_cf_user_id,",
						"          current_abs_compa_ratio,",
						"          current_ttc_compa_ratio,",
						"          respondersemail = RespondersEmail,",
						"          questiontitle = QuestionTitle,",
						"          answer = Answer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectfield",
						"selectfield sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          respondents as integer,",
						"          responserate as integer,",
						"          culture as integer,",
						"          culture_per_favorable as integer,",
						"          trust_team as integer,",
						"          trust_team_per_favorable as integer,",
						"          role_clarity_functional as string,",
						"          role_clarity_functional_per_favorable as string,",
						"          growth_functional as string,",
						"          growth_functional_per_favorable as string,",
						"          career as integer,",
						"          career_per_favorable as integer,",
						"          continuous_improvement_functional as string,",
						"          continuous_improvement_functional_per_favorable as string,",
						"          communication_manager as integer,",
						"          communication_manager_per_favorable as integer,",
						"          support as integer,",
						"          support_per_favorable as integer,",
						"          equal_opportunity as integer,",
						"          equal_opportunity_per_favorable as integer,",
						"          {distress_well-being} as integer,",
						"          {distress_well-being_per_favorable} as integer,",
						"          ethics_helpline as integer,",
						"          ethics_helpline_per_favorable as integer,",
						"          work_life_balance as integer,",
						"          work_life_balance_per_favorable as integer,",
						"          growth as integer,",
						"          growth_per_favorable as integer,",
						"          cooperation as integer,",
						"          cooperation_per_favorable as integer,",
						"          initiative as integer,",
						"          initiative_per_favorable as integer,",
						"          decision_making as integer,",
						"          decision_making_per_favorable as integer,",
						"          engagement_index as integer,",
						"          engagement_index_per_favorable as integer,",
						"          {engagement_index_>_recommend} as integer,",
						"          {engagement_index_>_recommend_per_favorable} as integer,",
						"          role_clarity as integer,",
						"          role_clarity_per_favorable as integer,",
						"          resources as integer,",
						"          resources_per_favorable as integer,",
						"          {engagement_index_>_esat} as integer,",
						"          {engagement_index_>_esat_per_favorable} as integer,",
						"          belonging as integer,",
						"          belonging_per_favorable as integer,",
						"          prospects as integer,",
						"          prospects_per_favorable as integer,",
						"          purpose_contribution as integer,",
						"          purpose_contribution_per_favorable as integer,",
						"          inclusion_team as integer,",
						"          inclusion_team_per_favorable as integer,",
						"          job_feedback as integer,",
						"          job_feedback_per_favorable as integer,",
						"          consumer_focus_culture as integer,",
						"          consumer_focus_culture_per_favorable as integer,",
						"          {non-discrimination} as integer,",
						"          {non-discrimination_per_favorable} as integer,",
						"          code_of_conduct as integer,",
						"          code_of_conduct_per_favorable as integer,",
						"          {health_&_safety} as integer,",
						"          {health_&_safety_per_favorable} as integer,",
						"          continuous_improvement as integer,",
						"          continuous_improvement_per_favorable as integer,",
						"          empowerment as integer,",
						"          empowerment_per_favorable as integer,",
						"          environment as integer,",
						"          environment_per_favorable as integer,",
						"          purpose as integer,",
						"          purpose_per_favorable as integer",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktodatalake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_delta_predandpresc')]"
			]
		}
	]
}